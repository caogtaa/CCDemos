[
  {
    "__type__": "cc.SpriteFrame",
    "content": {
      "name": "awesomeness-fft",
      "texture": "adogfACoRIl59/4OgXr43t",
      "rect": [
        0,
        0,
        512,
        179
      ],
      "offset": [
        0,
        0
      ],
      "originalSize": [
        512,
        179
      ],
      "capInsets": [
        0,
        0,
        0,
        0
      ]
    }
  },
  {
    "__type__": "cc.EffectAsset",
    "_name": "VMClassicFFT",
    "techniques": [
      {
        "passes": [
          {
            "blendState": {
              "targets": [
                {
                  "blend": true
                }
              ]
            },
            "rasterizerState": {
              "cullMode": 0
            },
            "properties": {
              "texture": {
                "value": "white",
                "type": 29
              },
              "grids": {
                "value": [
                  32,
                  38
                ],
                "type": 14
              },
              "row": {
                "value": [
                  0
                ],
                "type": 13
              },
              "startCol": {
                "value": [
                  0
                ],
                "type": 13
              },
              "endCol": {
                "value": [
                  0.0625
                ],
                "type": 13
              }
            },
            "program": "VMClassicFFT|vs|fs"
          }
        ]
      }
    ],
    "shaders": [
      {
        "hash": 19769679,
        "glsl3": {
          "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_uv0.y = 1.0 - v_uv0.y;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform UARGS {\n  vec2 grids;\n  float row;\n  float startCol;\n  float endCol;\n};\nvec3 hsv2rgb_smooth(in vec3 c) {\n  vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb);\n  return c.z * mix(vec3(1.0), rgb, c.y);\n}\nfloat Remap01(float a, float b, float t) {\n  return (t-a) / (b-a);\n}\nfloat Remap(float a, float b, float c, float d, float t) {\n  return Remap01(a, b, t) * (d - c) + c;\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  uv.y *= 1280./720.;\n  uv.y = uv.y * 2.0 - 1.0;\n  uv = uv * 1.1 - 0.05;\n  vec2 guv = fract(uv * grids);\n  vec2 gi = floor(uv * grids);\n  float col = Remap(0., 1., startCol, endCol, gi.x / grids.x);\n  float h = texture(texture, vec2(col, row)).r * 0.5;\n  float mask = step(abs(uv.y), floor(h * grids.y) / grids.y);\n  mask *= step(abs(uv.x - 0.5), 0.5);\n  mask *= uv.y < 0. ? 0.2 : 1.0;\n  vec2 gap = vec2(0.5, 0.35);\n  gap = smoothstep(gap.xx, gap.yy, abs(guv - gap.xx));\n  mask = mask * gap.x * gap.y;\n  mask += smoothstep(0.55, 0.5, abs(uv.x - 0.5)) * 0.3;\n  vec3 hsl = vec3(uv.x, 1.0, 1.0-uv.y);\n  vec3 rgb_s = hsv2rgb_smooth(hsl);\n  rgb_s *= mask;\n  vec4 color = vec4(rgb_s, mask);\n  gl_FragColor = color;\n}"
        },
        "glsl1": {
          "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_uv0.y = 1.0 - v_uv0.y;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\nprecision highp float;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform vec2 grids;\nuniform float row;\nuniform float startCol;\nuniform float endCol;\nvec3 hsv2rgb_smooth(in vec3 c) {\n  vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb);\n  return c.z * mix(vec3(1.0), rgb, c.y);\n}\nfloat Remap01(float a, float b, float t) {\n  return (t-a) / (b-a);\n}\nfloat Remap(float a, float b, float c, float d, float t) {\n  return Remap01(a, b, t) * (d - c) + c;\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  uv.y *= 1280./720.;\n  uv.y = uv.y * 2.0 - 1.0;\n  uv = uv * 1.1 - 0.05;\n  vec2 guv = fract(uv * grids);\n  vec2 gi = floor(uv * grids);\n  float col = Remap(0., 1., startCol, endCol, gi.x / grids.x);\n  float h = texture2D(texture, vec2(col, row)).r * 0.5;\n  float mask = step(abs(uv.y), floor(h * grids.y) / grids.y);\n  mask *= step(abs(uv.x - 0.5), 0.5);\n  mask *= uv.y < 0. ? 0.2 : 1.0;\n  vec2 gap = vec2(0.5, 0.35);\n  gap = smoothstep(gap.xx, gap.yy, abs(guv - gap.xx));\n  mask = mask * gap.x * gap.y;\n  mask += smoothstep(0.55, 0.5, abs(uv.x - 0.5)) * 0.3;\n  vec3 hsl = vec3(uv.x, 1.0, 1.0-uv.y);\n  vec3 rgb_s = hsv2rgb_smooth(hsl);\n  rgb_s *= mask;\n  vec4 color = vec4(rgb_s, mask);\n  gl_FragColor = color;\n}"
        },
        "builtins": {
          "globals": {
            "blocks": [
              {
                "name": "CCGlobal",
                "defines": []
              }
            ],
            "samplers": []
          },
          "locals": {
            "blocks": [
              {
                "name": "CCLocal",
                "defines": []
              }
            ],
            "samplers": []
          }
        },
        "defines": [],
        "blocks": [
          {
            "name": "UARGS",
            "members": [
              {
                "name": "grids",
                "type": 14,
                "count": 1
              },
              {
                "name": "row",
                "type": 13,
                "count": 1
              },
              {
                "name": "startCol",
                "type": 13,
                "count": 1
              },
              {
                "name": "endCol",
                "type": 13,
                "count": 1
              }
            ],
            "defines": [],
            "binding": 0
          }
        ],
        "samplers": [
          {
            "name": "texture",
            "type": 29,
            "count": 1,
            "defines": [],
            "binding": 30
          }
        ],
        "record": null,
        "name": "VMClassicFFT|vs|fs"
      }
    ]
  },
  {
    "__type__": "cc.EffectAsset",
    "_name": "VMClassicFFTExPass0",
    "techniques": [
      {
        "passes": [
          {
            "blendState": {
              "targets": [
                {
                  "blend": true
                }
              ]
            },
            "rasterizerState": {
              "cullMode": 0
            },
            "properties": {
              "texture": {
                "value": "white",
                "type": 29
              },
              "tex2": {
                "value": "white",
                "type": 29
              },
              "grids": {
                "value": [
                  32,
                  38
                ],
                "type": 14
              },
              "row": {
                "value": [
                  0
                ],
                "type": 13
              },
              "startCol": {
                "value": [
                  0
                ],
                "type": 13
              },
              "endCol": {
                "value": [
                  0.0625
                ],
                "type": 13
              }
            },
            "program": "VMClassicFFTExPass0|vs|fs"
          }
        ]
      }
    ],
    "shaders": [
      {
        "hash": 4253508909,
        "glsl3": {
          "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D tex2;\nuniform UARGS {\n  vec2 grids;\n  float row;\n  float startCol;\n  float endCol;\n};\nfloat Remap01(float a, float b, float t) {\n  return (t-a) / (b-a);\n}\nfloat Remap(float a, float b, float c, float d, float t) {\n  return Remap01(a, b, t) * (d - c) + c;\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  vec2 gi = floor(uv * grids);\n  float col = Remap(0., 1., startCol, endCol, gi.x / grids.x);\n  float v = texture(texture, vec2(col, row)).r;\n  vec4 color = vec4(vec3(v), 1.);\n  gl_FragColor = color;\n}"
        },
        "glsl1": {
          "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\nprecision highp float;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D tex2;\nuniform vec2 grids;\nuniform float row;\nuniform float startCol;\nuniform float endCol;\nfloat Remap01(float a, float b, float t) {\n  return (t-a) / (b-a);\n}\nfloat Remap(float a, float b, float c, float d, float t) {\n  return Remap01(a, b, t) * (d - c) + c;\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  vec2 gi = floor(uv * grids);\n  float col = Remap(0., 1., startCol, endCol, gi.x / grids.x);\n  float v = texture2D(texture, vec2(col, row)).r;\n  vec4 color = vec4(vec3(v), 1.);\n  gl_FragColor = color;\n}"
        },
        "builtins": {
          "globals": {
            "blocks": [
              {
                "name": "CCGlobal",
                "defines": []
              }
            ],
            "samplers": []
          },
          "locals": {
            "blocks": [
              {
                "name": "CCLocal",
                "defines": []
              }
            ],
            "samplers": []
          }
        },
        "defines": [],
        "blocks": [
          {
            "name": "UARGS",
            "members": [
              {
                "name": "grids",
                "type": 14,
                "count": 1
              },
              {
                "name": "row",
                "type": 13,
                "count": 1
              },
              {
                "name": "startCol",
                "type": 13,
                "count": 1
              },
              {
                "name": "endCol",
                "type": 13,
                "count": 1
              }
            ],
            "defines": [],
            "binding": 0
          }
        ],
        "samplers": [
          {
            "name": "texture",
            "type": 29,
            "count": 1,
            "defines": [],
            "binding": 30
          },
          {
            "name": "tex2",
            "type": 29,
            "count": 1,
            "defines": [],
            "binding": 31
          }
        ],
        "record": null,
        "name": "VMClassicFFTExPass0|vs|fs"
      }
    ]
  },
  {
    "__type__": "cc.Material",
    "_name": "VMMeter",
    "_effectAsset": {
      "__uuid__": "64Uo2xUMBHMKEO27lYAQVL"
    },
    "_techniqueData": {
      "0": {
        "props": {}
      }
    }
  },
  {
    "__type__": "cc.SpriteFrame",
    "content": {
      "name": "default_btn_disabled",
      "texture": "71VhFCTINJM6/Ky3oX9nBT",
      "rect": [
        0,
        0,
        40,
        40
      ],
      "offset": [
        0,
        0
      ],
      "originalSize": [
        40,
        40
      ],
      "capInsets": [
        12,
        12,
        12,
        12
      ]
    }
  },
  {
    "__type__": "cc.Material",
    "_name": "VMPolar",
    "_effectAsset": {
      "__uuid__": "b67Zd/7YVJDYkcepgrN5Mj"
    },
    "_techniqueData": {
      "0": {
        "props": {}
      }
    }
  },
  {
    "__type__": "cc.AudioClip",
    "_name": "awesomeness",
    "_native": ".mp3",
    "duration": 47.751837
  },
  {
    "__type__": "cc.EffectAsset",
    "_name": "VMPolarEx",
    "techniques": [
      {
        "passes": [
          {
            "blendState": {
              "targets": [
                {
                  "blend": true
                }
              ]
            },
            "rasterizerState": {
              "cullMode": 0
            },
            "properties": {
              "texture": {
                "value": "white",
                "type": 29
              }
            },
            "program": "VMPolarEx|vs|fs"
          }
        ]
      }
    ],
    "shaders": [
      {
        "hash": 2127671879,
        "glsl3": {
          "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nfloat Capsule(vec2 p, float o, float width, float height, float blur) {\n  float d = distance(p, vec2(clamp(p.x, o - height * 0.5, o + height * 0.5), 0.));\n  return d;\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  vec4 col = texture(texture, uv) * v_color;\n  uv = uv * 2.0 - 1.0;\n  uv.y *= 1280./720.;\n  uv.x = abs(uv.x);\n  float angle = atan(uv.y, uv.x);\n  float grids = 64.;\n  angle = angle / (2. * 3.14159265) + 0.5;\n  angle = fract(angle + 0.75);\n  float dist = length(uv);\n  float part_angle = fract(angle * grids) - 0.5;\n  float part_id = floor(angle * grids);\n  float h = texture(texture, vec2(part_id * 2. / grids, 0.5)).r * 0.25;\n  vec2 guv = vec2(cos(part_angle / grids * 2. * 3.14159265), sin(part_angle / grids * 2. * 3.14159265)) * dist;\n  float width = 0.005;\n  float blur = 4. / 720.;\n  float mask = Capsule(guv, 0.6, width, h, blur);\n  mask = smoothstep(width+blur, width, mask);\n  vec3 color = vec3(mask);\n  gl_FragColor = vec4(color, mask);\n}"
        },
        "glsl1": {
          "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\nprecision highp float;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nfloat Capsule(vec2 p, float o, float width, float height, float blur) {\n  float d = distance(p, vec2(clamp(p.x, o - height * 0.5, o + height * 0.5), 0.));\n  return d;\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  vec4 col = texture2D(texture, uv) * v_color;\n  uv = uv * 2.0 - 1.0;\n  uv.y *= 1280./720.;\n  uv.x = abs(uv.x);\n  float angle = atan(uv.y, uv.x);\n  float grids = 64.;\n  angle = angle / (2. * 3.14159265) + 0.5;\n  angle = fract(angle + 0.75);\n  float dist = length(uv);\n  float part_angle = fract(angle * grids) - 0.5;\n  float part_id = floor(angle * grids);\n  float h = texture2D(texture, vec2(part_id * 2. / grids, 0.5)).r * 0.25;\n  vec2 guv = vec2(cos(part_angle / grids * 2. * 3.14159265), sin(part_angle / grids * 2. * 3.14159265)) * dist;\n  float width = 0.005;\n  float blur = 4. / 720.;\n  float mask = Capsule(guv, 0.6, width, h, blur);\n  mask = smoothstep(width+blur, width, mask);\n  vec3 color = vec3(mask);\n  gl_FragColor = vec4(color, mask);\n}"
        },
        "builtins": {
          "globals": {
            "blocks": [
              {
                "name": "CCGlobal",
                "defines": []
              }
            ],
            "samplers": []
          },
          "locals": {
            "blocks": [
              {
                "name": "CCLocal",
                "defines": []
              }
            ],
            "samplers": []
          }
        },
        "defines": [],
        "blocks": [],
        "samplers": [
          {
            "name": "texture",
            "type": 29,
            "count": 1,
            "defines": [],
            "binding": 30
          }
        ],
        "record": null,
        "name": "VMPolarEx|vs|fs"
      }
    ]
  },
  {
    "__type__": "cc.SpriteFrame",
    "content": {
      "name": "ObservingTheStar-fft",
      "texture": "5cOnnLWP5JG6PdwhG7og/x",
      "rect": [
        0,
        0,
        512,
        505
      ],
      "offset": [
        0,
        0
      ],
      "originalSize": [
        512,
        505
      ],
      "capInsets": [
        0,
        0,
        0,
        0
      ]
    }
  },
  {
    "__type__": "cc.Material",
    "_name": "VMPolarExPass0",
    "_effectAsset": {
      "__uuid__": "7dbP9+/sdBgZO9tvQKYy1m"
    },
    "_techniqueData": {
      "0": {
        "props": {}
      }
    }
  },
  {
    "__type__": "cc.Material",
    "_name": "VMClassic",
    "_effectAsset": {
      "__uuid__": "93f5KGympPho0twpP6qZos"
    },
    "_techniqueData": {
      "0": {
        "props": {}
      }
    }
  },
  {
    "__type__": "cc.Material",
    "_name": "VMCircle",
    "_effectAsset": {
      "__uuid__": "6aVWCKXPdAoau3r6s6ada+"
    },
    "_techniqueData": {
      "0": {
        "props": {}
      }
    }
  },
  {
    "__type__": "cc.EffectAsset",
    "_name": "VMMeter",
    "techniques": [
      {
        "passes": [
          {
            "blendState": {
              "targets": [
                {
                  "blend": true
                }
              ]
            },
            "rasterizerState": {
              "cullMode": 0
            },
            "properties": {
              "texture": {
                "value": "white",
                "type": 29
              },
              "grids": {
                "value": [
                  32,
                  38
                ],
                "type": 14
              }
            },
            "program": "VMMeter|vs|fs"
          }
        ]
      }
    ],
    "shaders": [
      {
        "hash": 3628193993,
        "glsl3": {
          "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_uv0.y = 1.0 - v_uv0.y;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform UARGS {\n  vec2 grids;\n};\nvec3 hsv2rgb_smooth(in vec3 c) {\n  vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb);\n  return c.z * mix(vec3(1.0), rgb, c.y);\n}\nfloat Remap01(float a, float b, float t) {\n  return (t-a) / (b-a);\n}\nfloat Remap(float a, float b, float c, float d, float t) {\n  return Remap01(a, b, t) * (d - c) + c;\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  uv.y *= 1280./720.;\n  uv.y = uv.y * 2.0 - 1.0;\n  uv = uv * 1.1 - 0.05;\n  vec2 guv = fract(uv * grids);\n  vec2 gi = floor(uv * grids);\n  float h = texture(texture, vec2(gi.x / grids.x, 0.5)).r * 0.5;\n  h = max(h, 0.01);\n  float mask = step(uv.y, h);\n  mask *= step(0., uv.y);\n  mask *= step(abs(uv.x - 0.5), 0.5);\n  mask *= smoothstep(0.5, 0.35, abs(guv.x - 0.5));\n  h = Remap(0., 0.5, 0.7, 0.08, h);\n  vec3 hsl = vec3(h, 1.0, 1.0);\n  vec3 rgb_s = hsv2rgb_smooth(hsl);\n  rgb_s *= mask;\n  vec4 col = vec4(rgb_s, mask);\n  gl_FragColor = col;\n}"
        },
        "glsl1": {
          "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_uv0.y = 1.0 - v_uv0.y;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\nprecision highp float;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform vec2 grids;\nvec3 hsv2rgb_smooth(in vec3 c) {\n  vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb);\n  return c.z * mix(vec3(1.0), rgb, c.y);\n}\nfloat Remap01(float a, float b, float t) {\n  return (t-a) / (b-a);\n}\nfloat Remap(float a, float b, float c, float d, float t) {\n  return Remap01(a, b, t) * (d - c) + c;\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  uv.y *= 1280./720.;\n  uv.y = uv.y * 2.0 - 1.0;\n  uv = uv * 1.1 - 0.05;\n  vec2 guv = fract(uv * grids);\n  vec2 gi = floor(uv * grids);\n  float h = texture2D(texture, vec2(gi.x / grids.x, 0.5)).r * 0.5;\n  h = max(h, 0.01);\n  float mask = step(uv.y, h);\n  mask *= step(0., uv.y);\n  mask *= step(abs(uv.x - 0.5), 0.5);\n  mask *= smoothstep(0.5, 0.35, abs(guv.x - 0.5));\n  h = Remap(0., 0.5, 0.7, 0.08, h);\n  vec3 hsl = vec3(h, 1.0, 1.0);\n  vec3 rgb_s = hsv2rgb_smooth(hsl);\n  rgb_s *= mask;\n  vec4 col = vec4(rgb_s, mask);\n  gl_FragColor = col;\n}"
        },
        "builtins": {
          "globals": {
            "blocks": [
              {
                "name": "CCGlobal",
                "defines": []
              }
            ],
            "samplers": []
          },
          "locals": {
            "blocks": [
              {
                "name": "CCLocal",
                "defines": []
              }
            ],
            "samplers": []
          }
        },
        "defines": [],
        "blocks": [
          {
            "name": "UARGS",
            "members": [
              {
                "name": "grids",
                "type": 14,
                "count": 1
              }
            ],
            "defines": [],
            "binding": 0
          }
        ],
        "samplers": [
          {
            "name": "texture",
            "type": 29,
            "count": 1,
            "defines": [],
            "binding": 30
          }
        ],
        "record": null,
        "name": "VMMeter|vs|fs"
      }
    ]
  },
  {
    "__type__": "cc.EffectAsset",
    "_name": "VMCircle",
    "techniques": [
      {
        "passes": [
          {
            "blendState": {
              "targets": [
                {
                  "blend": true
                }
              ]
            },
            "rasterizerState": {
              "cullMode": 0
            },
            "properties": {
              "texture": {
                "value": "white",
                "type": 29
              }
            },
            "program": "VMCircle|vs|fs"
          }
        ]
      }
    ],
    "shaders": [
      {
        "hash": 1231480185,
        "glsl3": {
          "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  vec4 col = texture(texture, uv) * v_color;\n  uv = uv * 2.0 - 1.0;\n  uv.y *= 1280./720.;\n  float grids = 16.;\n  float dist = length(uv);\n  float gd = 0.0;\n  gd = dist;\n  gd = fract(dist * grids);\n  float gid = floor(dist * grids);\n  float h = texture(texture, vec2(gid / grids, 0.5)).r * 0.25;\n  float blur = 4./720. * (gid + 1.);\n  float width = 0.01 * (gid) + h;\n  float mask = smoothstep(width+blur, width, abs(gd - 0.5));\n  vec3 color = vec3(mask * (gid+1.) / grids + h);\n  gl_FragColor = vec4(color, mask);\n}"
        },
        "glsl1": {
          "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\nprecision highp float;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  vec4 col = texture2D(texture, uv) * v_color;\n  uv = uv * 2.0 - 1.0;\n  uv.y *= 1280./720.;\n  float grids = 16.;\n  float dist = length(uv);\n  float gd = 0.0;\n  gd = dist;\n  gd = fract(dist * grids);\n  float gid = floor(dist * grids);\n  float h = texture2D(texture, vec2(gid / grids, 0.5)).r * 0.25;\n  float blur = 4./720. * (gid + 1.);\n  float width = 0.01 * (gid) + h;\n  float mask = smoothstep(width+blur, width, abs(gd - 0.5));\n  vec3 color = vec3(mask * (gid+1.) / grids + h);\n  gl_FragColor = vec4(color, mask);\n}"
        },
        "builtins": {
          "globals": {
            "blocks": [
              {
                "name": "CCGlobal",
                "defines": []
              }
            ],
            "samplers": []
          },
          "locals": {
            "blocks": [
              {
                "name": "CCLocal",
                "defines": []
              }
            ],
            "samplers": []
          }
        },
        "defines": [],
        "blocks": [],
        "samplers": [
          {
            "name": "texture",
            "type": 29,
            "count": 1,
            "defines": [],
            "binding": 30
          }
        ],
        "record": null,
        "name": "VMCircle|vs|fs"
      }
    ]
  },
  {
    "__type__": "cc.AudioClip",
    "_name": "Juhani Junkala [Retro Game Music Pack] Ending",
    "_native": ".mp3",
    "duration": 44.69551
  },
  {
    "__type__": "cc.EffectAsset",
    "_name": "VMPolarExPass0",
    "techniques": [
      {
        "passes": [
          {
            "blendState": {
              "targets": [
                {
                  "blend": true
                }
              ]
            },
            "rasterizerState": {
              "cullMode": 0
            },
            "properties": {
              "texture": {
                "value": "white",
                "type": 29
              },
              "tex2": {
                "value": "white",
                "type": 29
              },
              "grids": {
                "value": [
                  32,
                  38
                ],
                "type": 14
              },
              "row": {
                "value": [
                  0
                ],
                "type": 13
              },
              "startCol": {
                "value": [
                  0
                ],
                "type": 13
              },
              "endCol": {
                "value": [
                  0.0625
                ],
                "type": 13
              }
            },
            "program": "VMPolarExPass0|vs|fs"
          }
        ]
      }
    ],
    "shaders": [
      {
        "hash": 2478223792,
        "glsl3": {
          "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D tex2;\nuniform UARGS {\n  vec2 grids;\n  float row;\n  float startCol;\n  float endCol;\n};\nfloat Remap01(float a, float b, float t) {\n  return (t-a) / (b-a);\n}\nfloat Remap(float a, float b, float c, float d, float t) {\n  return Remap01(a, b, t) * (d - c) + c;\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  vec2 guv = fract(uv * grids);\n  vec2 gid = floor(uv * grids);\n  float colBass = Remap(0., 1., startCol, endCol, 0. / grids.x);\n  float colMid = Remap(0., 1., startCol, endCol, 12. / grids.x);\n  float shift = step(fract(cc_time.x * 30.), 0.5);\n  float prevGid = gid.x - shift;\n  float v = 0.;\n  if (prevGid < 0.)\n    v = (texture(texture, vec2(colBass, row)).r + texture(texture, vec2(colMid, row)).r) * 0.5;\n  else\n    v = texture(tex2, vec2(prevGid / grids.x, 0.)).r;\n  vec4 color = vec4(vec3(v), 1.);\n  gl_FragColor = color;\n}"
        },
        "glsl1": {
          "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\nprecision highp float;\nuniform vec4 cc_time;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D tex2;\nuniform vec2 grids;\nuniform float row;\nuniform float startCol;\nuniform float endCol;\nfloat Remap01(float a, float b, float t) {\n  return (t-a) / (b-a);\n}\nfloat Remap(float a, float b, float c, float d, float t) {\n  return Remap01(a, b, t) * (d - c) + c;\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  vec2 guv = fract(uv * grids);\n  vec2 gid = floor(uv * grids);\n  float colBass = Remap(0., 1., startCol, endCol, 0. / grids.x);\n  float colMid = Remap(0., 1., startCol, endCol, 12. / grids.x);\n  float shift = step(fract(cc_time.x * 30.), 0.5);\n  float prevGid = gid.x - shift;\n  float v = 0.;\n  if (prevGid < 0.)\n    v = (texture2D(texture, vec2(colBass, row)).r + texture2D(texture, vec2(colMid, row)).r) * 0.5;\n  else\n    v = texture2D(tex2, vec2(prevGid / grids.x, 0.)).r;\n  vec4 color = vec4(vec3(v), 1.);\n  gl_FragColor = color;\n}"
        },
        "builtins": {
          "globals": {
            "blocks": [
              {
                "name": "CCGlobal",
                "defines": []
              }
            ],
            "samplers": []
          },
          "locals": {
            "blocks": [
              {
                "name": "CCLocal",
                "defines": []
              }
            ],
            "samplers": []
          }
        },
        "defines": [],
        "blocks": [
          {
            "name": "UARGS",
            "members": [
              {
                "name": "grids",
                "type": 14,
                "count": 1
              },
              {
                "name": "row",
                "type": 13,
                "count": 1
              },
              {
                "name": "startCol",
                "type": 13,
                "count": 1
              },
              {
                "name": "endCol",
                "type": 13,
                "count": 1
              }
            ],
            "defines": [],
            "binding": 0
          }
        ],
        "samplers": [
          {
            "name": "texture",
            "type": 29,
            "count": 1,
            "defines": [],
            "binding": 30
          },
          {
            "name": "tex2",
            "type": 29,
            "count": 1,
            "defines": [],
            "binding": 31
          }
        ],
        "record": null,
        "name": "VMPolarExPass0|vs|fs"
      }
    ]
  },
  [
    {
      "__type__": "cc.Prefab",
      "_name": "visualizer",
      "data": {
        "__id__": 1
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "visualizer",
      "_components": [
        {
          "__type__": "cc.Widget",
          "node": {
            "__id__": 1
          },
          "_left": 310,
          "_right": 310,
          "_top": 590,
          "_bottom": 590,
          "_originalWidth": 100,
          "_originalHeight": 100
        },
        {
          "__type__": "5d6a2fHfPhNJYwz2SdIkrY+",
          "node": {
            "__id__": 1
          },
          "_materials": [
            {
              "__uuid__": "83WRwW55pAYZ0BIf8BxUUb"
            }
          ],
          "_sizeMode": 0,
          "_isTrimmedMode": false
        }
      ],
      "_prefab": {
        "__type__": "cc.PrefabInfo",
        "root": {
          "__id__": 1
        },
        "asset": {
          "__uuid__": "7du9dr4w1LuYTXty6zhBhc"
        },
        "fileId": "87OurppalBNbXl5Mk+Y9Nt"
      },
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 720,
        "height": 1280
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    }
  ],
  {
    "__type__": "cc.Material",
    "_name": "VMClassicFFT",
    "_effectAsset": {
      "__uuid__": "0bkvDng85CD5qX5ye2PI+j"
    },
    "_techniqueData": {
      "0": {
        "props": {
          "endCol": 0.0625
        }
      }
    }
  },
  {
    "__type__": "cc.EffectAsset",
    "_name": "VMWaveFFT",
    "techniques": [
      {
        "passes": [
          {
            "blendState": {
              "targets": [
                {
                  "blend": true
                }
              ]
            },
            "rasterizerState": {
              "cullMode": 0
            },
            "properties": {
              "texture": {
                "value": "white",
                "type": 29
              }
            },
            "program": "VMWaveFFT|vs|fs"
          }
        ]
      }
    ],
    "shaders": [
      {
        "hash": 2457036429,
        "glsl3": {
          "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_uv0.y = 1.0 - v_uv0.y;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nfloat squared(float value) {\n  return value * value;\n}\nfloat getWeight(float x) {\n  return texture(texture, vec2(x, 0.5)).r;\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  uv.y = uv.y * 2.0 - 1.0;\n  float lineIntensity;\n  float glowWidth;\n  vec3 color = vec3(0.0);\n  float t = -cc_time.x;\n  for (float i = 0.0; i < 1.0; i++) {\n    uv.y += (0.2 * sin(uv.x + i/7.0));\n    vec2 h2;\n    float scale = 1.;\n    h2.x = getWeight(v_uv0.x * scale);\n    h2.y = getWeight((v_uv0.x + 1./32.) * scale);\n    float f = fract(v_uv0.x * 32.);\n    float lerpF = f * f * (3.0 - 2.0 * f);\n    float h = mix(h2.x, h2.y, lerpF);\n    lineIntensity = 0.4 + squared(1.6 * abs(mod(v_uv0.x + i / 1.3 + t,2.0) - 1.0));\n    glowWidth = abs(lineIntensity / (150.0 * (uv.y - 0.2)));\n    glowWidth = abs(lineIntensity / (150.0 * (uv.y - 0.2 + h)));\n    color += vec3(glowWidth * (2.0 + sin(t * 0.13)),\n                  glowWidth * (2.0 - sin(t * 0.23)),\n                  glowWidth * (2.0 - cos(t * 0.19)));\n  }\n  gl_FragColor = vec4(color, 1.0);\n}"
        },
        "glsl1": {
          "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_uv0.y = 1.0 - v_uv0.y;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\nprecision highp float;\nuniform vec4 cc_time;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nfloat squared(float value) {\n  return value * value;\n}\nfloat getWeight(float x) {\n  return texture2D(texture, vec2(x, 0.5)).r;\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  uv.y = uv.y * 2.0 - 1.0;\n  float lineIntensity;\n  float glowWidth;\n  vec3 color = vec3(0.0);\n  float t = -cc_time.x;\n  for (float i = 0.0; i < 1.0; i++) {\n    uv.y += (0.2 * sin(uv.x + i/7.0));\n    vec2 h2;\n    float scale = 1.;\n    h2.x = getWeight(v_uv0.x * scale);\n    h2.y = getWeight((v_uv0.x + 1./32.) * scale);\n    float f = fract(v_uv0.x * 32.);\n    float lerpF = f * f * (3.0 - 2.0 * f);\n    float h = mix(h2.x, h2.y, lerpF);\n    lineIntensity = 0.4 + squared(1.6 * abs(mod(v_uv0.x + i / 1.3 + t,2.0) - 1.0));\n    glowWidth = abs(lineIntensity / (150.0 * (uv.y - 0.2)));\n    glowWidth = abs(lineIntensity / (150.0 * (uv.y - 0.2 + h)));\n    color += vec3(glowWidth * (2.0 + sin(t * 0.13)),\n                  glowWidth * (2.0 - sin(t * 0.23)),\n                  glowWidth * (2.0 - cos(t * 0.19)));\n  }\n  gl_FragColor = vec4(color, 1.0);\n}"
        },
        "builtins": {
          "globals": {
            "blocks": [
              {
                "name": "CCGlobal",
                "defines": []
              }
            ],
            "samplers": []
          },
          "locals": {
            "blocks": [
              {
                "name": "CCLocal",
                "defines": []
              }
            ],
            "samplers": []
          }
        },
        "defines": [],
        "blocks": [],
        "samplers": [
          {
            "name": "texture",
            "type": 29,
            "count": 1,
            "defines": [],
            "binding": 30
          }
        ],
        "record": null,
        "name": "VMWaveFFT|vs|fs"
      }
    ]
  },
  {
    "__type__": "cc.AudioClip",
    "_name": "ObservingTheStar",
    "_native": ".mp3",
    "duration": 134.478367
  },
  {
    "__type__": "cc.Material",
    "_name": "VMClassicFFTExPass0",
    "_effectAsset": {
      "__uuid__": "0cBXlHiKhMpK9WUv7/I78T"
    },
    "_techniqueData": {
      "0": {
        "props": {
          "endCol": 0.0625
        }
      }
    }
  },
  {
    "__type__": "cc.EffectAsset",
    "_name": "VMClassic",
    "techniques": [
      {
        "passes": [
          {
            "blendState": {
              "targets": [
                {
                  "blend": true
                }
              ]
            },
            "rasterizerState": {
              "cullMode": 0
            },
            "properties": {
              "texture": {
                "value": "white",
                "type": 29
              },
              "grids": {
                "value": [
                  32,
                  38
                ],
                "type": 14
              }
            },
            "program": "VMClassic|vs|fs"
          }
        ]
      }
    ],
    "shaders": [
      {
        "hash": 86173694,
        "glsl3": {
          "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_uv0.y = 1.0 - v_uv0.y;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform UARGS {\n  vec2 grids;\n};\nvec3 hsv2rgb_smooth(in vec3 c) {\n  vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb);\n  return c.z * mix(vec3(1.0), rgb, c.y);\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  uv.y *= 1280./720.;\n  uv.y = uv.y * 2.0 - 1.0;\n  uv = uv * 1.1 - 0.05;\n  vec2 guv = fract(uv * grids);\n  vec2 gi = floor(uv * grids);\n  float h = texture(texture, vec2(gi.x / grids.x, 0.5)).r * 0.5;\n  float mask = step(abs(uv.y), floor(h * grids.y) / grids.y);\n  mask *= step(abs(uv.x - 0.5), 0.5);\n  mask *= uv.y < 0. ? 0.2 : 1.0;\n  vec2 gap = vec2(0.5, 0.35);\n  gap = smoothstep(gap.xx, gap.yy, abs(guv - gap.xx));\n  mask = mask * gap.x * gap.y;\n  mask += smoothstep(0.55, 0.5, abs(uv.x - 0.5)) * 0.3;\n  vec3 hsl = vec3(uv.x, 1.0, 1.0-uv.y);\n  vec3 rgb_s = hsv2rgb_smooth(hsl);\n  rgb_s *= mask;\n  vec4 col = vec4(rgb_s, mask);\n  gl_FragColor = col;\n}"
        },
        "glsl1": {
          "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_uv0.y = 1.0 - v_uv0.y;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\nprecision highp float;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform vec2 grids;\nvec3 hsv2rgb_smooth(in vec3 c) {\n  vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb);\n  return c.z * mix(vec3(1.0), rgb, c.y);\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  uv.y *= 1280./720.;\n  uv.y = uv.y * 2.0 - 1.0;\n  uv = uv * 1.1 - 0.05;\n  vec2 guv = fract(uv * grids);\n  vec2 gi = floor(uv * grids);\n  float h = texture2D(texture, vec2(gi.x / grids.x, 0.5)).r * 0.5;\n  float mask = step(abs(uv.y), floor(h * grids.y) / grids.y);\n  mask *= step(abs(uv.x - 0.5), 0.5);\n  mask *= uv.y < 0. ? 0.2 : 1.0;\n  vec2 gap = vec2(0.5, 0.35);\n  gap = smoothstep(gap.xx, gap.yy, abs(guv - gap.xx));\n  mask = mask * gap.x * gap.y;\n  mask += smoothstep(0.55, 0.5, abs(uv.x - 0.5)) * 0.3;\n  vec3 hsl = vec3(uv.x, 1.0, 1.0-uv.y);\n  vec3 rgb_s = hsv2rgb_smooth(hsl);\n  rgb_s *= mask;\n  vec4 col = vec4(rgb_s, mask);\n  gl_FragColor = col;\n}"
        },
        "builtins": {
          "globals": {
            "blocks": [
              {
                "name": "CCGlobal",
                "defines": []
              }
            ],
            "samplers": []
          },
          "locals": {
            "blocks": [
              {
                "name": "CCLocal",
                "defines": []
              }
            ],
            "samplers": []
          }
        },
        "defines": [],
        "blocks": [
          {
            "name": "UARGS",
            "members": [
              {
                "name": "grids",
                "type": 14,
                "count": 1
              }
            ],
            "defines": [],
            "binding": 0
          }
        ],
        "samplers": [
          {
            "name": "texture",
            "type": 29,
            "count": 1,
            "defines": [],
            "binding": 30
          }
        ],
        "record": null,
        "name": "VMClassic|vs|fs"
      }
    ]
  },
  {
    "__type__": "cc.Material",
    "_name": "VMWaveFFT",
    "_effectAsset": {
      "__uuid__": "8aTSdieR9NRY2ZKlkhThwa"
    },
    "_techniqueData": {
      "0": {
        "props": {}
      }
    }
  },
  {
    "__type__": "cc.EffectAsset",
    "_name": "VMPolar",
    "techniques": [
      {
        "passes": [
          {
            "blendState": {
              "targets": [
                {
                  "blend": true
                }
              ]
            },
            "rasterizerState": {
              "cullMode": 0
            },
            "properties": {
              "texture": {
                "value": "white",
                "type": 29
              }
            },
            "program": "VMPolar|vs|fs"
          }
        ]
      }
    ],
    "shaders": [
      {
        "hash": 2127671879,
        "glsl3": {
          "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nfloat Capsule(vec2 p, float o, float width, float height, float blur) {\n  float d = distance(p, vec2(clamp(p.x, o - height * 0.5, o + height * 0.5), 0.));\n  return d;\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  vec4 col = texture(texture, uv) * v_color;\n  uv = uv * 2.0 - 1.0;\n  uv.y *= 1280./720.;\n  uv.x = abs(uv.x);\n  float angle = atan(uv.y, uv.x);\n  float grids = 64.;\n  angle = angle / (2. * 3.14159265) + 0.5;\n  angle = fract(angle + 0.75);\n  float dist = length(uv);\n  float part_angle = fract(angle * grids) - 0.5;\n  float part_id = floor(angle * grids);\n  float h = texture(texture, vec2(part_id * 2. / grids, 0.5)).r * 0.25;\n  vec2 guv = vec2(cos(part_angle / grids * 2. * 3.14159265), sin(part_angle / grids * 2. * 3.14159265)) * dist;\n  float width = 0.005;\n  float blur = 4. / 720.;\n  float mask = Capsule(guv, 0.6, width, h, blur);\n  mask = smoothstep(width+blur, width, mask);\n  vec3 color = vec3(mask);\n  gl_FragColor = vec4(color, mask);\n}"
        },
        "glsl1": {
          "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\nprecision highp float;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nfloat Capsule(vec2 p, float o, float width, float height, float blur) {\n  float d = distance(p, vec2(clamp(p.x, o - height * 0.5, o + height * 0.5), 0.));\n  return d;\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  vec4 col = texture2D(texture, uv) * v_color;\n  uv = uv * 2.0 - 1.0;\n  uv.y *= 1280./720.;\n  uv.x = abs(uv.x);\n  float angle = atan(uv.y, uv.x);\n  float grids = 64.;\n  angle = angle / (2. * 3.14159265) + 0.5;\n  angle = fract(angle + 0.75);\n  float dist = length(uv);\n  float part_angle = fract(angle * grids) - 0.5;\n  float part_id = floor(angle * grids);\n  float h = texture2D(texture, vec2(part_id * 2. / grids, 0.5)).r * 0.25;\n  vec2 guv = vec2(cos(part_angle / grids * 2. * 3.14159265), sin(part_angle / grids * 2. * 3.14159265)) * dist;\n  float width = 0.005;\n  float blur = 4. / 720.;\n  float mask = Capsule(guv, 0.6, width, h, blur);\n  mask = smoothstep(width+blur, width, mask);\n  vec3 color = vec3(mask);\n  gl_FragColor = vec4(color, mask);\n}"
        },
        "builtins": {
          "globals": {
            "blocks": [
              {
                "name": "CCGlobal",
                "defines": []
              }
            ],
            "samplers": []
          },
          "locals": {
            "blocks": [
              {
                "name": "CCLocal",
                "defines": []
              }
            ],
            "samplers": []
          }
        },
        "defines": [],
        "blocks": [],
        "samplers": [
          {
            "name": "texture",
            "type": 29,
            "count": 1,
            "defines": [],
            "binding": 30
          }
        ],
        "record": null,
        "name": "VMPolar|vs|fs"
      }
    ]
  },
  {
    "__type__": "cc.Material",
    "_name": "VMPolarEx",
    "_effectAsset": {
      "__uuid__": "3ej0D63HxBubooYHCqdIe7"
    },
    "_techniqueData": {
      "0": {
        "props": {}
      }
    }
  },
  {
    "__type__": "cc.EffectAsset",
    "_name": "VMPolarWave",
    "techniques": [
      {
        "passes": [
          {
            "blendState": {
              "targets": [
                {
                  "blend": true
                }
              ]
            },
            "rasterizerState": {
              "cullMode": 0
            },
            "properties": {
              "texture": {
                "value": "white",
                "type": 29
              }
            },
            "program": "VMPolarWave|vs|fs"
          }
        ]
      }
    ],
    "shaders": [
      {
        "hash": 611188406,
        "glsl3": {
          "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nvec3 hsv2rgb_smooth(in vec3 c) {\n  vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb);\n  return c.z * mix(vec3(1.0), rgb, c.y);\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  vec4 col = texture(texture, uv) * v_color;\n  uv = uv * 2.0 - 1.0;\n  uv.y *= 1280./720.;\n  uv.x = abs(uv.x);\n  float angle = atan(uv.y, uv.x);\n  float grids = 64.;\n  angle = angle / (2. * 3.14159265) + 0.5;\n  angle = fract(angle + 0.75);\n  float dist = length(uv);\n  float part_angle = fract(angle * grids) - 0.5;\n  float part_id = floor(angle * grids);\n  vec2 h2;\n  h2.x = texture(texture, vec2(part_id * 2. / grids, 0.5)).r;\n  h2.y = texture(texture, vec2((part_id * 2. + 2.) / grids, 0.5)).r;\n  h2 = h2 * h2 * h2 + 0.01;\n  float f = fract(angle * grids);\n  float cubic = f * f * (3.0 - 2.0 * f);\n  float h = mix(h2.x, h2.y, cubic);\n  float blur = 4. / 720.;\n  vec3 hsl = vec3(fract(angle - cc_time.x * 0.5), 1.0, 1.0);\n  vec3 color = hsv2rgb_smooth(hsl);\n  float ext = h * 0.5;\n  float thickness = blur;\n  float mask = smoothstep(thickness + blur, thickness, abs(dist - ext - 0.5));\n  color *= mask;\n  gl_FragColor = vec4(color, mask);\n}"
        },
        "glsl1": {
          "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\nprecision highp float;\nuniform vec4 cc_time;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nvec3 hsv2rgb_smooth(in vec3 c) {\n  vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb);\n  return c.z * mix(vec3(1.0), rgb, c.y);\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  vec4 col = texture2D(texture, uv) * v_color;\n  uv = uv * 2.0 - 1.0;\n  uv.y *= 1280./720.;\n  uv.x = abs(uv.x);\n  float angle = atan(uv.y, uv.x);\n  float grids = 64.;\n  angle = angle / (2. * 3.14159265) + 0.5;\n  angle = fract(angle + 0.75);\n  float dist = length(uv);\n  float part_angle = fract(angle * grids) - 0.5;\n  float part_id = floor(angle * grids);\n  vec2 h2;\n  h2.x = texture2D(texture, vec2(part_id * 2. / grids, 0.5)).r;\n  h2.y = texture2D(texture, vec2((part_id * 2. + 2.) / grids, 0.5)).r;\n  h2 = h2 * h2 * h2 + 0.01;\n  float f = fract(angle * grids);\n  float cubic = f * f * (3.0 - 2.0 * f);\n  float h = mix(h2.x, h2.y, cubic);\n  float blur = 4. / 720.;\n  vec3 hsl = vec3(fract(angle - cc_time.x * 0.5), 1.0, 1.0);\n  vec3 color = hsv2rgb_smooth(hsl);\n  float ext = h * 0.5;\n  float thickness = blur;\n  float mask = smoothstep(thickness + blur, thickness, abs(dist - ext - 0.5));\n  color *= mask;\n  gl_FragColor = vec4(color, mask);\n}"
        },
        "builtins": {
          "globals": {
            "blocks": [
              {
                "name": "CCGlobal",
                "defines": []
              }
            ],
            "samplers": []
          },
          "locals": {
            "blocks": [
              {
                "name": "CCLocal",
                "defines": []
              }
            ],
            "samplers": []
          }
        },
        "defines": [],
        "blocks": [],
        "samplers": [
          {
            "name": "texture",
            "type": 29,
            "count": 1,
            "defines": [],
            "binding": 30
          }
        ],
        "record": null,
        "name": "VMPolarWave|vs|fs"
      }
    ]
  },
  [
    {
      "__type__": "cc.SceneAsset",
      "_name": "SceneVisualizeMusic",
      "scene": {
        "__id__": 1
      },
      "asyncLoadAssets": null
    },
    {
      "__type__": "cc.Scene",
      "_name": "New Node",
      "_children": [
        {
          "__id__": 2
        }
      ],
      "_active": false,
      "_anchorPoint": {
        "__type__": "cc.Vec2"
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "Canvas",
      "_parent": {
        "__id__": 1
      },
      "_children": [
        {
          "__id__": 3
        },
        {
          "__id__": 4
        },
        {
          "__id__": 5
        },
        {
          "__id__": 6
        },
        {
          "__id__": 8
        },
        {
          "__id__": 10
        },
        {
          "__id__": 12
        },
        {
          "__id__": 15
        },
        {
          "__id__": 18
        }
      ],
      "_components": [
        {
          "__type__": "cc.Canvas",
          "node": {
            "__id__": 2
          },
          "_designResolution": {
            "__type__": "cc.Size",
            "width": 720,
            "height": 1280
          },
          "_fitWidth": true
        },
        {
          "__type__": "cc.Widget",
          "node": {
            "__id__": 2
          },
          "_alignFlags": 45,
          "_originalHeight": 1280
        },
        {
          "__type__": "66078LwZ6VOTp0Xu66oVwY9",
          "node": {
            "__id__": 2
          },
          "clips": [
            {
              "__uuid__": "3bUBFmAJpL7LNbZCdTs3hJ"
            },
            {
              "__uuid__": "7av53dU4BDfquFmQnxNQOd"
            },
            {
              "__uuid__": "8asM16iH9AdqXehzCbcJu0"
            }
          ],
          "fftTextures": [
            {
              "__uuid__": "0bN2Sdc41JGqHL0Jcy7Q/b"
            },
            {
              "__uuid__": "d8frtnBJdPmJxkMmJDbxkS"
            },
            {
              "__uuid__": "457UpWLFlIX4HwQvUOJIrJ"
            }
          ],
          "visualizer": {
            "__id__": 4
          },
          "visualizerH5": {
            "__id__": 5
          },
          "visualizerEx": {
            "__id__": 7
          },
          "pass0Imgs": [
            {
              "__id__": 9
            },
            {
              "__id__": 11
            }
          ],
          "materials": [
            {
              "__uuid__": "57GlrkE6hElq4Dufq+Qtcr"
            },
            {
              "__uuid__": "ea1mCXZANEY4ZKy/YQAviI"
            },
            {
              "__uuid__": "1f9MN9dRZLSpiPW8a4AYYt"
            },
            {
              "__uuid__": "5em9xk3YJJ4KUH7z1rQvNL"
            },
            {
              "__uuid__": "32StRLdX9KBI12gaWx/kye"
            },
            {
              "__uuid__": "b7WXQt+5FP3okBEoElXP+d"
            },
            {
              "__uuid__": "b12bRgAXtN/pohlhMfXLu8"
            }
          ],
          "pass0Materials": [
            {
              "__uuid__": "8fKn140oNEF40p8v62dAFN"
            },
            {
              "__uuid__": "53CQ6mWfpFcKnSjxWFpWI5"
            }
          ]
        }
      ],
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 720,
        "height": 1280
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          360,
          640,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      },
      "_id": "a5esZu+45LA5mBpvttspPD"
    },
    {
      "__type__": "cc.Node",
      "_name": "Main Camera",
      "_parent": {
        "__id__": 2
      },
      "_components": [
        {
          "__type__": "cc.Camera",
          "node": {
            "__id__": 3
          },
          "_clearFlags": 7,
          "_depth": -1
        }
      ],
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 720,
        "height": 1280
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          0,
          0,
          716.5501844230481,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "__type__": "cc.Node",
      "_parent": {
        "__id__": 2
      },
      "_id": "e4i2EkNx9DFb8AvPTUjwlw",
      "_prefab": {
        "__type__": "cc.PrefabInfo",
        "root": {
          "__id__": 4
        },
        "asset": {
          "__uuid__": "7du9dr4w1LuYTXty6zhBhc"
        },
        "fileId": "87OurppalBNbXl5Mk+Y9Nt",
        "sync": true
      },
      "_name": "visualizer",
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "__type__": "cc.Node",
      "_parent": {
        "__id__": 2
      },
      "_id": "efoCn5d71BcZeYqSWu+bwy",
      "_prefab": {
        "__type__": "cc.PrefabInfo",
        "root": {
          "__id__": 5
        },
        "asset": {
          "__uuid__": "f2OyIYw+FIHac6uTQpLW2G"
        },
        "fileId": "40U3w3l6pIqpqiH6H+HTk1",
        "sync": true
      },
      "_name": "visualizerH5",
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          0,
          640,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "visualizerEx",
      "_parent": {
        "__id__": 2
      },
      "_components": [
        {
          "__id__": 7
        }
      ],
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 720,
        "height": 1280
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "__type__": "cc.Sprite",
      "node": {
        "__id__": 6
      },
      "_materials": [
        {
          "__uuid__": "b12bRgAXtN/pohlhMfXLu8"
        }
      ],
      "_spriteFrame": {
        "__uuid__": "d8frtnBJdPmJxkMmJDbxkS"
      },
      "_sizeMode": 0,
      "_isTrimmedMode": false
    },
    {
      "__type__": "cc.Node",
      "_name": "exImg0",
      "_parent": {
        "__id__": 2
      },
      "_components": [
        {
          "__id__": 9
        }
      ],
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 32,
        "height": 1
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          0,
          364.788,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "__type__": "cc.Sprite",
      "node": {
        "__id__": 8
      },
      "_enabled": false,
      "_materials": [
        {
          "__uuid__": "53CQ6mWfpFcKnSjxWFpWI5"
        }
      ],
      "_spriteFrame": {
        "__uuid__": "0bN2Sdc41JGqHL0Jcy7Q/b"
      },
      "_sizeMode": 0,
      "_isTrimmedMode": false
    },
    {
      "__type__": "cc.Node",
      "_name": "exImg1",
      "_parent": {
        "__id__": 2
      },
      "_components": [
        {
          "__id__": 11
        }
      ],
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 32,
        "height": 1
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          0,
          194.736,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "__type__": "cc.Sprite",
      "node": {
        "__id__": 10
      },
      "_enabled": false,
      "_materials": [
        {
          "__uuid__": "53CQ6mWfpFcKnSjxWFpWI5"
        }
      ],
      "_spriteFrame": {
        "__uuid__": "0bN2Sdc41JGqHL0Jcy7Q/b"
      },
      "_sizeMode": 0,
      "_isTrimmedMode": false
    },
    {
      "__type__": "cc.Node",
      "_name": "btnNext",
      "_parent": {
        "__id__": 2
      },
      "_children": [
        {
          "__id__": 13
        }
      ],
      "_components": [
        {
          "__type__": "cc.Button",
          "node": {
            "__id__": 12
          },
          "clickEvents": [
            {
              "__type__": "cc.ClickEvent",
              "target": {
                "__id__": 2
              },
              "_componentId": "66078LwZ6VOTp0Xu66oVwY9",
              "handler": "NextAudio"
            }
          ],
          "_N$transition": 2,
          "transition": 2,
          "_N$normalColor": {
            "__type__": "cc.Color",
            "r": 230,
            "g": 230,
            "b": 230
          },
          "_N$pressedColor": {
            "__type__": "cc.Color",
            "r": 200,
            "g": 200,
            "b": 200
          },
          "pressedColor": {
            "__type__": "cc.Color",
            "r": 200,
            "g": 200,
            "b": 200
          },
          "_N$disabledColor": {
            "__type__": "cc.Color",
            "r": 120,
            "g": 120,
            "b": 120,
            "a": 200
          },
          "_N$normalSprite": {
            "__uuid__": "f0BIwQ8D5Ml7nTNQbh1YlS"
          },
          "_N$pressedSprite": {
            "__uuid__": "e97GVMl6JHh5Ml5qEDdSGa"
          },
          "pressedSprite": {
            "__uuid__": "e97GVMl6JHh5Ml5qEDdSGa"
          },
          "_N$hoverSprite": {
            "__uuid__": "f0BIwQ8D5Ml7nTNQbh1YlS"
          },
          "hoverSprite": {
            "__uuid__": "f0BIwQ8D5Ml7nTNQbh1YlS"
          },
          "_N$disabledSprite": {
            "__uuid__": "29FYIk+N1GYaeWH/q1NxQO"
          },
          "_N$target": {
            "__id__": 13
          }
        }
      ],
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 100,
        "height": 40
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          138.856,
          543.995,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "Background",
      "_objFlags": 512,
      "_parent": {
        "__id__": 12
      },
      "_children": [
        {
          "__id__": 14
        }
      ],
      "_components": [
        {
          "__type__": "cc.Sprite",
          "node": {
            "__id__": 13
          },
          "_materials": [
            {
              "__uuid__": "ecpdLyjvZBwrvm+cedCcQy"
            }
          ],
          "_spriteFrame": {
            "__uuid__": "f0BIwQ8D5Ml7nTNQbh1YlS"
          },
          "_type": 1,
          "_sizeMode": 0
        },
        {
          "__type__": "cc.Widget",
          "node": {
            "__id__": 13
          },
          "alignMode": 0,
          "_alignFlags": 45,
          "_originalWidth": 100,
          "_originalHeight": 40
        }
      ],
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 100,
        "height": 40
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "Label",
      "_objFlags": 512,
      "_parent": {
        "__id__": 13
      },
      "_components": [
        {
          "__type__": "cc.Label",
          "node": {
            "__id__": 14
          },
          "_materials": [
            {
              "__uuid__": "ecpdLyjvZBwrvm+cedCcQy"
            }
          ],
          "_useOriginalSize": false,
          "_string": "切歌",
          "_N$string": "切歌",
          "_fontSize": 20,
          "_enableWrapText": false,
          "_N$horizontalAlign": 1,
          "_N$verticalAlign": 1,
          "_N$overflow": 1,
          "_N$cacheMode": 1
        }
      ],
      "_color": {
        "__type__": "cc.Color"
      },
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 100,
        "height": 40
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "btnTick",
      "_parent": {
        "__id__": 2
      },
      "_children": [
        {
          "__id__": 16
        }
      ],
      "_active": false,
      "_components": [
        {
          "__type__": "cc.Button",
          "node": {
            "__id__": 15
          },
          "clickEvents": [
            {
              "__type__": "cc.ClickEvent",
              "target": {
                "__id__": 2
              },
              "_componentId": "66078LwZ6VOTp0Xu66oVwY9",
              "handler": "Tick"
            }
          ],
          "_N$transition": 2,
          "transition": 2,
          "_N$normalColor": {
            "__type__": "cc.Color",
            "r": 230,
            "g": 230,
            "b": 230
          },
          "_N$pressedColor": {
            "__type__": "cc.Color",
            "r": 200,
            "g": 200,
            "b": 200
          },
          "pressedColor": {
            "__type__": "cc.Color",
            "r": 200,
            "g": 200,
            "b": 200
          },
          "_N$disabledColor": {
            "__type__": "cc.Color",
            "r": 120,
            "g": 120,
            "b": 120,
            "a": 200
          },
          "_N$normalSprite": {
            "__uuid__": "f0BIwQ8D5Ml7nTNQbh1YlS"
          },
          "_N$pressedSprite": {
            "__uuid__": "e97GVMl6JHh5Ml5qEDdSGa"
          },
          "pressedSprite": {
            "__uuid__": "e97GVMl6JHh5Ml5qEDdSGa"
          },
          "_N$hoverSprite": {
            "__uuid__": "f0BIwQ8D5Ml7nTNQbh1YlS"
          },
          "hoverSprite": {
            "__uuid__": "f0BIwQ8D5Ml7nTNQbh1YlS"
          },
          "_N$disabledSprite": {
            "__uuid__": "29FYIk+N1GYaeWH/q1NxQO"
          },
          "_N$target": {
            "__id__": 16
          }
        }
      ],
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 100,
        "height": 40
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          265.475,
          543.414,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "Background",
      "_objFlags": 512,
      "_parent": {
        "__id__": 15
      },
      "_children": [
        {
          "__id__": 17
        }
      ],
      "_components": [
        {
          "__type__": "cc.Sprite",
          "node": {
            "__id__": 16
          },
          "_materials": [
            {
              "__uuid__": "ecpdLyjvZBwrvm+cedCcQy"
            }
          ],
          "_spriteFrame": {
            "__uuid__": "f0BIwQ8D5Ml7nTNQbh1YlS"
          },
          "_type": 1,
          "_sizeMode": 0
        },
        {
          "__type__": "cc.Widget",
          "node": {
            "__id__": 16
          },
          "alignMode": 0,
          "_alignFlags": 45,
          "_originalWidth": 100,
          "_originalHeight": 40
        }
      ],
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 100,
        "height": 40
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "Label",
      "_objFlags": 512,
      "_parent": {
        "__id__": 16
      },
      "_components": [
        {
          "__type__": "cc.Label",
          "node": {
            "__id__": 17
          },
          "_materials": [
            {
              "__uuid__": "ecpdLyjvZBwrvm+cedCcQy"
            }
          ],
          "_useOriginalSize": false,
          "_string": "Tick",
          "_N$string": "Tick",
          "_fontSize": 20,
          "_enableWrapText": false,
          "_N$horizontalAlign": 1,
          "_N$verticalAlign": 1,
          "_N$overflow": 1,
          "_N$cacheMode": 1
        }
      ],
      "_color": {
        "__type__": "cc.Color"
      },
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 100,
        "height": 40
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "btnNextEffect",
      "_parent": {
        "__id__": 2
      },
      "_children": [
        {
          "__id__": 19
        }
      ],
      "_components": [
        {
          "__type__": "cc.Button",
          "node": {
            "__id__": 18
          },
          "clickEvents": [
            {
              "__type__": "cc.ClickEvent",
              "target": {
                "__id__": 2
              },
              "_componentId": "66078LwZ6VOTp0Xu66oVwY9",
              "handler": "NextMat"
            }
          ],
          "_N$transition": 2,
          "transition": 2,
          "_N$normalColor": {
            "__type__": "cc.Color",
            "r": 230,
            "g": 230,
            "b": 230
          },
          "_N$pressedColor": {
            "__type__": "cc.Color",
            "r": 200,
            "g": 200,
            "b": 200
          },
          "pressedColor": {
            "__type__": "cc.Color",
            "r": 200,
            "g": 200,
            "b": 200
          },
          "_N$disabledColor": {
            "__type__": "cc.Color",
            "r": 120,
            "g": 120,
            "b": 120,
            "a": 200
          },
          "_N$normalSprite": {
            "__uuid__": "f0BIwQ8D5Ml7nTNQbh1YlS"
          },
          "_N$pressedSprite": {
            "__uuid__": "e97GVMl6JHh5Ml5qEDdSGa"
          },
          "pressedSprite": {
            "__uuid__": "e97GVMl6JHh5Ml5qEDdSGa"
          },
          "_N$hoverSprite": {
            "__uuid__": "f0BIwQ8D5Ml7nTNQbh1YlS"
          },
          "hoverSprite": {
            "__uuid__": "f0BIwQ8D5Ml7nTNQbh1YlS"
          },
          "_N$disabledSprite": {
            "__uuid__": "29FYIk+N1GYaeWH/q1NxQO"
          },
          "_N$target": {
            "__id__": 19
          }
        }
      ],
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 100,
        "height": 40
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          -114.325,
          545.623,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "Background",
      "_objFlags": 512,
      "_parent": {
        "__id__": 18
      },
      "_children": [
        {
          "__id__": 20
        }
      ],
      "_components": [
        {
          "__type__": "cc.Sprite",
          "node": {
            "__id__": 19
          },
          "_materials": [
            {
              "__uuid__": "ecpdLyjvZBwrvm+cedCcQy"
            }
          ],
          "_spriteFrame": {
            "__uuid__": "f0BIwQ8D5Ml7nTNQbh1YlS"
          },
          "_type": 1,
          "_sizeMode": 0
        },
        {
          "__type__": "cc.Widget",
          "node": {
            "__id__": 19
          },
          "alignMode": 0,
          "_alignFlags": 45,
          "_originalWidth": 100,
          "_originalHeight": 40
        }
      ],
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 100,
        "height": 40
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "Label",
      "_objFlags": 512,
      "_parent": {
        "__id__": 19
      },
      "_components": [
        {
          "__type__": "cc.Label",
          "node": {
            "__id__": 20
          },
          "_materials": [
            {
              "__uuid__": "ecpdLyjvZBwrvm+cedCcQy"
            }
          ],
          "_useOriginalSize": false,
          "_string": "切效果",
          "_N$string": "切效果",
          "_fontSize": 20,
          "_enableWrapText": false,
          "_N$horizontalAlign": 1,
          "_N$verticalAlign": 1,
          "_N$overflow": 1,
          "_N$cacheMode": 1
        }
      ],
      "_color": {
        "__type__": "cc.Color"
      },
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 100,
        "height": 40
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    }
  ],
  {
    "__type__": "cc.SpriteFrame",
    "content": {
      "name": "Juhani Junkala [Retro Game Music Pack] Ending-fft",
      "texture": "fbG84xvrJHuYg69j/jjvFr",
      "rect": [
        0,
        0,
        512,
        168
      ],
      "offset": [
        0,
        0
      ],
      "originalSize": [
        512,
        168
      ],
      "capInsets": [
        0,
        0,
        0,
        0
      ]
    }
  },
  {
    "__type__": "cc.SpriteFrame",
    "content": {
      "name": "default_btn_pressed",
      "texture": "b4P/PCArtIdIH38t6mlw8Y",
      "rect": [
        0,
        0,
        40,
        40
      ],
      "offset": [
        0,
        0
      ],
      "originalSize": [
        40,
        40
      ],
      "capInsets": [
        12,
        12,
        12,
        12
      ]
    }
  },
  {
    "__type__": "cc.Material",
    "_name": "VMPolarWave",
    "_effectAsset": {
      "__uuid__": "c8QrBHoOZMba9V+ncZ1PjM"
    },
    "_techniqueData": {
      "0": {
        "props": {}
      }
    }
  },
  {
    "__type__": "cc.SpriteFrame",
    "content": {
      "name": "default_btn_normal",
      "texture": "e8Ueib+qJEhL6mXAHdnwbi",
      "rect": [
        0,
        0,
        40,
        40
      ],
      "offset": [
        0,
        0
      ],
      "originalSize": [
        40,
        40
      ],
      "capInsets": [
        12,
        12,
        12,
        12
      ]
    }
  },
  [
    {
      "__type__": "cc.Prefab",
      "_name": "visualizerH5",
      "data": {
        "__id__": 1
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "visualizerH5",
      "_components": [
        {
          "__type__": "8ecb5qS6zJHRpXqyUByvOxY",
          "node": {
            "__id__": 1
          },
          "_materials": [
            {
              "__uuid__": "57GlrkE6hElq4Dufq+Qtcr"
            }
          ],
          "_sizeMode": 0,
          "_isTrimmedMode": false
        }
      ],
      "_prefab": {
        "__type__": "cc.PrefabInfo",
        "root": {
          "__id__": 1
        },
        "asset": {
          "__uuid__": "f2OyIYw+FIHac6uTQpLW2G"
        },
        "fileId": "40U3w3l6pIqpqiH6H+HTk1"
      },
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 720,
        "height": 1280
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          0,
          640,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    }
  ]
]