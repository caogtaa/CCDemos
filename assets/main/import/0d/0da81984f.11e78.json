[
  {
    "__type__": "cc.SpriteFrame",
    "content": {
      "name": "NPOT_flipper128",
      "texture": "f426J7B/5JtasrLcolijrg",
      "rect": [
        15,
        16,
        66,
        103
      ],
      "offset": [
        -2,
        -3.5
      ],
      "originalSize": [
        100,
        128
      ],
      "capInsets": [
        0,
        0,
        0,
        0
      ]
    }
  },
  {
    "__type__": "cc.EffectAsset",
    "_name": "SDFBloom",
    "techniques": [
      {
        "passes": [
          {
            "blendState": {
              "targets": [
                {
                  "blend": true
                }
              ]
            },
            "rasterizerState": {
              "cullMode": 0
            },
            "properties": {
              "texture": {
                "value": "white",
                "type": 29
              },
              "outlineColor": {
                "value": [
                  1,
                  0,
                  1,
                  1
                ],
                "inspector": {
                  "displayName": "颜色"
                },
                "type": 16
              }
            },
            "program": "SDFBloom|vs|fs"
          }
        ]
      }
    ],
    "shaders": [
      {
        "hash": 2490879779,
        "glsl3": {
          "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform SDFARGS {\n  vec4 texSize;\n  vec2 maxDist;\n};\n#if SDF_HI_RES\n  #if SDF_DUAL_CHANNEL\n  float GetAlpha(sampler2D texture, vec2 st) {\n    vec2 uv = st.xy * texSize.xy;\n    vec2 uv00 = floor(uv - vec2(0.5));\n    vec2 uvlerp = uv - uv00 - vec2(0.5);\n    vec4 onestep = vec4(texSize.zw, 0., 0.5);\n    vec2 st00 = (uv00  + onestep.ww) * texSize.zw;\n    vec2 rawtex00 = texture2D(texture, st00).ar;\n    vec2 rawtex10 = texture2D(texture, st00 + onestep.xz).ar;\n    vec2 rawtex01 = texture2D(texture, st00 + onestep.zy).ar;\n    vec2 rawtex11 = texture2D(texture, st00 + onestep.xy).ar;\n        rawtex00.r = rawtex00.g * 0.00390625 + rawtex00.r;;\n    rawtex10.r = rawtex10.g * 0.00390625 + rawtex10.r;;\n    rawtex01.r = rawtex01.g * 0.00390625 + rawtex01.r;;\n    rawtex11.r = rawtex11.g * 0.00390625 + rawtex11.r;;\n    vec2 D00_10 = vec2(rawtex00.r, rawtex10.r);\n    vec2 D01_11 = vec2(rawtex01.r, rawtex11.r);\n    vec2 D0_1 = mix(D00_10, D01_11, uvlerp.y);\n    return mix(D0_1.x, D0_1.y, uvlerp.x);\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    return GetAlpha(texture, st) * 256. - 128.;\n  }\n  #else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return 16.0 * (alpha - 0.5);\n  }\n  #endif\n#else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return (alpha * 2. - 1.) * maxDist.x;\n  }\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nin vec2 v_uv1;\nuniform sampler2D texture;\nuniform ARGS {\n  vec4 outlineColor;\n};\nfloat Remap01(float a, float b, float t) {\n  return (t-a) / (b-a);\n}\nfloat Remap(float a, float b, float c, float d, float t) {\n  return Remap01(a, b, t) * (d-c) + c;\n}\nfloat Pulse(float x) {\n  return pow(4.0 * x * (1.0 - x), 16.0);\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  float alpha = GetD(texture, uv) * maxDist.y * 0.5 + 0.5;\n  float outlineWidth = 0.4;\n  float centerAlpha = 0.5;\n  float alphaDist = abs(alpha - centerAlpha);\n  float mask = smoothstep(outlineWidth, 0., alphaDist);\n  vec4 col = vec4(outlineColor.rgb, mask);\n  float brightness = Remap(0., 1., 0.7, 1.0, abs(sin(cc_time.x * 2.0)));\n  col.rgb += Pulse((alphaDist + 0.5)) * brightness;\n  gl_FragColor = col;\n}"
        },
        "glsl1": {
          "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\nprecision highp float;\nuniform vec4 cc_time;\nuniform vec4 texSize;\nuniform vec2 maxDist;\n#if SDF_HI_RES\n  #if SDF_DUAL_CHANNEL\n  float GetAlpha(sampler2D texture, vec2 st) {\n    vec2 uv = st.xy * texSize.xy;\n    vec2 uv00 = floor(uv - vec2(0.5));\n    vec2 uvlerp = uv - uv00 - vec2(0.5);\n    vec4 onestep = vec4(texSize.zw, 0., 0.5);\n    vec2 st00 = (uv00  + onestep.ww) * texSize.zw;\n    vec2 rawtex00 = texture2D(texture, st00).ar;\n    vec2 rawtex10 = texture2D(texture, st00 + onestep.xz).ar;\n    vec2 rawtex01 = texture2D(texture, st00 + onestep.zy).ar;\n    vec2 rawtex11 = texture2D(texture, st00 + onestep.xy).ar;\n        rawtex00.r = rawtex00.g * 0.00390625 + rawtex00.r;;\n    rawtex10.r = rawtex10.g * 0.00390625 + rawtex10.r;;\n    rawtex01.r = rawtex01.g * 0.00390625 + rawtex01.r;;\n    rawtex11.r = rawtex11.g * 0.00390625 + rawtex11.r;;\n    vec2 D00_10 = vec2(rawtex00.r, rawtex10.r);\n    vec2 D01_11 = vec2(rawtex01.r, rawtex11.r);\n    vec2 D0_1 = mix(D00_10, D01_11, uvlerp.y);\n    return mix(D0_1.x, D0_1.y, uvlerp.x);\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    return GetAlpha(texture, st) * 256. - 128.;\n  }\n  #else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return 16.0 * (alpha - 0.5);\n  }\n  #endif\n#else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return (alpha * 2. - 1.) * maxDist.x;\n  }\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nvarying vec2 v_uv1;\nuniform sampler2D texture;\nuniform vec4 outlineColor;\nfloat Remap01(float a, float b, float t) {\n  return (t-a) / (b-a);\n}\nfloat Remap(float a, float b, float c, float d, float t) {\n  return Remap01(a, b, t) * (d-c) + c;\n}\nfloat Pulse(float x) {\n  return pow(4.0 * x * (1.0 - x), 16.0);\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  float alpha = GetD(texture, uv) * maxDist.y * 0.5 + 0.5;\n  float outlineWidth = 0.4;\n  float centerAlpha = 0.5;\n  float alphaDist = abs(alpha - centerAlpha);\n  float mask = smoothstep(outlineWidth, 0., alphaDist);\n  vec4 col = vec4(outlineColor.rgb, mask);\n  float brightness = Remap(0., 1., 0.7, 1.0, abs(sin(cc_time.x * 2.0)));\n  col.rgb += Pulse((alphaDist + 0.5)) * brightness;\n  gl_FragColor = col;\n}"
        },
        "builtins": {
          "globals": {
            "blocks": [
              {
                "name": "CCGlobal",
                "defines": []
              }
            ],
            "samplers": []
          },
          "locals": {
            "blocks": [
              {
                "name": "CCLocal",
                "defines": []
              }
            ],
            "samplers": []
          }
        },
        "defines": [
          {
            "name": "SDF_HI_RES",
            "type": "boolean",
            "defines": []
          },
          {
            "name": "SDF_DUAL_CHANNEL",
            "type": "boolean",
            "defines": [
              "SDF_HI_RES"
            ]
          }
        ],
        "blocks": [
          {
            "name": "SDFARGS",
            "members": [
              {
                "name": "texSize",
                "type": 16,
                "count": 1
              },
              {
                "name": "maxDist",
                "type": 14,
                "count": 1
              }
            ],
            "defines": [],
            "binding": 0
          },
          {
            "name": "ARGS",
            "members": [
              {
                "name": "outlineColor",
                "type": 16,
                "count": 1
              }
            ],
            "defines": [],
            "binding": 1
          }
        ],
        "samplers": [
          {
            "name": "texture",
            "type": 29,
            "count": 1,
            "defines": [],
            "binding": 30
          }
        ],
        "record": null,
        "name": "SDFBloom|vs|fs"
      }
    ]
  },
  {
    "__type__": "cc.Material",
    "_name": "SDFMorph",
    "_effectAsset": {
      "__uuid__": "42af1C+spD6ZtzjqFjrOGG"
    },
    "_techniqueData": {
      "0": {
        "props": {
          "texture": {
            "__uuid__": "79C8YJ7jRBnZC3oX32MH83"
          }
        }
      }
    }
  },
  {
    "__type__": "cc.SpriteFrame",
    "content": {
      "name": "default_btn_disabled",
      "texture": "71VhFCTINJM6/Ky3oX9nBT",
      "rect": [
        0,
        0,
        40,
        40
      ],
      "offset": [
        0,
        0
      ],
      "originalSize": [
        40,
        40
      ],
      "capInsets": [
        12,
        12,
        12,
        12
      ]
    }
  },
  {
    "__type__": "cc.SpriteFrame",
    "content": {
      "name": "default_scrollbar",
      "texture": "02kcE0s9pAmLe145ftvpR/",
      "rect": [
        0,
        0,
        30,
        15
      ],
      "offset": [
        0,
        0
      ],
      "originalSize": [
        30,
        15
      ],
      "capInsets": [
        10,
        4,
        10,
        4
      ]
    }
  },
  {
    "__type__": "cc.EffectAsset",
    "_name": "SDFDropShadow",
    "techniques": [
      {
        "passes": [
          {
            "blendState": {
              "targets": [
                {
                  "blend": true
                }
              ]
            },
            "rasterizerState": {
              "cullMode": 0
            },
            "properties": {
              "texture": {
                "value": "white",
                "type": 29
              }
            },
            "program": "SDFDropShadow|vs|fs"
          }
        ]
      }
    ],
    "shaders": [
      {
        "hash": 2569788867,
        "glsl3": {
          "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\n#extension GL_OES_standard_derivatives: enable\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform SDFARGS {\n  vec4 texSize;\n  vec2 maxDist;\n};\n#if SDF_HI_RES\n  #if SDF_DUAL_CHANNEL\n  float GetAlpha(sampler2D texture, vec2 st) {\n    vec2 uv = st.xy * texSize.xy;\n    vec2 uv00 = floor(uv - vec2(0.5));\n    vec2 uvlerp = uv - uv00 - vec2(0.5);\n    vec4 onestep = vec4(texSize.zw, 0., 0.5);\n    vec2 st00 = (uv00  + onestep.ww) * texSize.zw;\n    vec2 rawtex00 = texture2D(texture, st00).ar;\n    vec2 rawtex10 = texture2D(texture, st00 + onestep.xz).ar;\n    vec2 rawtex01 = texture2D(texture, st00 + onestep.zy).ar;\n    vec2 rawtex11 = texture2D(texture, st00 + onestep.xy).ar;\n        rawtex00.r = rawtex00.g * 0.00390625 + rawtex00.r;;\n    rawtex10.r = rawtex10.g * 0.00390625 + rawtex10.r;;\n    rawtex01.r = rawtex01.g * 0.00390625 + rawtex01.r;;\n    rawtex11.r = rawtex11.g * 0.00390625 + rawtex11.r;;\n    vec2 D00_10 = vec2(rawtex00.r, rawtex10.r);\n    vec2 D01_11 = vec2(rawtex01.r, rawtex11.r);\n    vec2 D0_1 = mix(D00_10, D01_11, uvlerp.y);\n    return mix(D0_1.x, D0_1.y, uvlerp.x);\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    return GetAlpha(texture, st) * 256. - 128.;\n  }\n  #else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return 16.0 * (alpha - 0.5);\n  }\n  #endif\n#else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return (alpha * 2. - 1.) * maxDist.x;\n  }\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nin vec2 v_uv1;\nuniform sampler2D texture;\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  float D = GetD(texture, uv);\n  float D2 = GetD(texture, uv + texSize.zw * 4.);\n  float aastepD = fwidth(D);\n  float aastepD2 = fwidth(D2);\n  float maskD = smoothstep(-aastepD, aastepD, D);\n  float maskD2 = smoothstep(-aastepD2, aastepD2, D2);\n  maskD2 = clamp(maskD2 - maskD, 0., 1.);\n  vec3 color = vec3(0.) * maskD2 + vec3(1.) * maskD;\n  vec3 bg = vec3(1.0);\n  color = mix(bg, color, clamp(maskD + maskD2, 0., 1.0));\n  gl_FragColor = vec4(color, 1.0);\n}"
        },
        "glsl1": {
          "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\n#extension GL_OES_standard_derivatives: enable\nprecision highp float;\nuniform vec4 texSize;\nuniform vec2 maxDist;\n#if SDF_HI_RES\n  #if SDF_DUAL_CHANNEL\n  float GetAlpha(sampler2D texture, vec2 st) {\n    vec2 uv = st.xy * texSize.xy;\n    vec2 uv00 = floor(uv - vec2(0.5));\n    vec2 uvlerp = uv - uv00 - vec2(0.5);\n    vec4 onestep = vec4(texSize.zw, 0., 0.5);\n    vec2 st00 = (uv00  + onestep.ww) * texSize.zw;\n    vec2 rawtex00 = texture2D(texture, st00).ar;\n    vec2 rawtex10 = texture2D(texture, st00 + onestep.xz).ar;\n    vec2 rawtex01 = texture2D(texture, st00 + onestep.zy).ar;\n    vec2 rawtex11 = texture2D(texture, st00 + onestep.xy).ar;\n        rawtex00.r = rawtex00.g * 0.00390625 + rawtex00.r;;\n    rawtex10.r = rawtex10.g * 0.00390625 + rawtex10.r;;\n    rawtex01.r = rawtex01.g * 0.00390625 + rawtex01.r;;\n    rawtex11.r = rawtex11.g * 0.00390625 + rawtex11.r;;\n    vec2 D00_10 = vec2(rawtex00.r, rawtex10.r);\n    vec2 D01_11 = vec2(rawtex01.r, rawtex11.r);\n    vec2 D0_1 = mix(D00_10, D01_11, uvlerp.y);\n    return mix(D0_1.x, D0_1.y, uvlerp.x);\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    return GetAlpha(texture, st) * 256. - 128.;\n  }\n  #else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return 16.0 * (alpha - 0.5);\n  }\n  #endif\n#else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return (alpha * 2. - 1.) * maxDist.x;\n  }\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nvarying vec2 v_uv1;\nuniform sampler2D texture;\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  float D = GetD(texture, uv);\n  float D2 = GetD(texture, uv + texSize.zw * 4.);\n  float aastepD = fwidth(D);\n  float aastepD2 = fwidth(D2);\n  float maskD = smoothstep(-aastepD, aastepD, D);\n  float maskD2 = smoothstep(-aastepD2, aastepD2, D2);\n  maskD2 = clamp(maskD2 - maskD, 0., 1.);\n  vec3 color = vec3(0.) * maskD2 + vec3(1.) * maskD;\n  vec3 bg = vec3(1.0);\n  color = mix(bg, color, clamp(maskD + maskD2, 0., 1.0));\n  gl_FragColor = vec4(color, 1.0);\n}"
        },
        "builtins": {
          "globals": {
            "blocks": [
              {
                "name": "CCGlobal",
                "defines": []
              }
            ],
            "samplers": []
          },
          "locals": {
            "blocks": [
              {
                "name": "CCLocal",
                "defines": []
              }
            ],
            "samplers": []
          }
        },
        "defines": [
          {
            "name": "SDF_HI_RES",
            "type": "boolean",
            "defines": []
          },
          {
            "name": "SDF_DUAL_CHANNEL",
            "type": "boolean",
            "defines": [
              "SDF_HI_RES"
            ]
          }
        ],
        "blocks": [
          {
            "name": "SDFARGS",
            "members": [
              {
                "name": "texSize",
                "type": 16,
                "count": 1
              },
              {
                "name": "maxDist",
                "type": 14,
                "count": 1
              }
            ],
            "defines": [],
            "binding": 0
          }
        ],
        "samplers": [
          {
            "name": "texture",
            "type": 29,
            "count": 1,
            "defines": [],
            "binding": 30
          }
        ],
        "record": null,
        "name": "SDFDropShadow|vs|fs"
      }
    ]
  },
  {
    "__type__": "cc.EffectAsset",
    "_name": "SDFMorph",
    "techniques": [
      {
        "passes": [
          {
            "blendState": {
              "targets": [
                {
                  "blend": true
                }
              ]
            },
            "rasterizerState": {
              "cullMode": 0
            },
            "properties": {
              "texture": {
                "value": "white",
                "type": 29
              }
            },
            "program": "SDFMorph|vs|fs"
          }
        ]
      }
    ],
    "shaders": [
      {
        "hash": 3462935730,
        "glsl3": {
          "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\n#extension GL_OES_standard_derivatives: enable\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform SDFARGS {\n  vec4 texSize;\n  vec2 maxDist;\n};\n#if SDF_HI_RES\n  #if SDF_DUAL_CHANNEL\n  float GetAlpha(sampler2D texture, vec2 st) {\n    vec2 uv = st.xy * texSize.xy;\n    vec2 uv00 = floor(uv - vec2(0.5));\n    vec2 uvlerp = uv - uv00 - vec2(0.5);\n    vec4 onestep = vec4(texSize.zw, 0., 0.5);\n    vec2 st00 = (uv00  + onestep.ww) * texSize.zw;\n    vec2 rawtex00 = texture2D(texture, st00).ar;\n    vec2 rawtex10 = texture2D(texture, st00 + onestep.xz).ar;\n    vec2 rawtex01 = texture2D(texture, st00 + onestep.zy).ar;\n    vec2 rawtex11 = texture2D(texture, st00 + onestep.xy).ar;\n        rawtex00.r = rawtex00.g * 0.00390625 + rawtex00.r;;\n    rawtex10.r = rawtex10.g * 0.00390625 + rawtex10.r;;\n    rawtex01.r = rawtex01.g * 0.00390625 + rawtex01.r;;\n    rawtex11.r = rawtex11.g * 0.00390625 + rawtex11.r;;\n    vec2 D00_10 = vec2(rawtex00.r, rawtex10.r);\n    vec2 D01_11 = vec2(rawtex01.r, rawtex11.r);\n    vec2 D0_1 = mix(D00_10, D01_11, uvlerp.y);\n    return mix(D0_1.x, D0_1.y, uvlerp.x);\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    return GetAlpha(texture, st) * 256. - 128.;\n  }\n  #else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return 16.0 * (alpha - 0.5);\n  }\n  #endif\n#else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return (alpha * 2. - 1.) * maxDist.x;\n  }\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nfloat CircleSDF(vec2 uv, vec2 o, float offset) {\n  float dist = distance(uv, o) * 2. - 1.;\n  dist += offset;\n  return (-dist) * texSize.x * maxDist.y * 0.25;\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  vec2 o = uv * 2.0 - 1.0;\n  o.y *= texSize.y * texSize.z;\n  float D = GetD(texture, uv);\n  float alpha = D * maxDist.y;\n  float circle = CircleSDF(o, vec2(0., 0.), 0.15);\n  float t = cc_time.x;\n  alpha = mix(circle, alpha, smoothstep(0.35, 0.65, sin(t * 2.0) * 0.5 + 0.5));\n  float outlineWidth = 0.1;\n  float aastep = max(fwidth(alpha), 1e-8);\n  float mask = smoothstep(aastep, -aastep, abs(alpha) - outlineWidth);\n  gl_FragColor = vec4(0., 1., 0., mask);\n}"
        },
        "glsl1": {
          "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\n#extension GL_OES_standard_derivatives: enable\nprecision highp float;\nuniform vec4 cc_time;\nuniform vec4 texSize;\nuniform vec2 maxDist;\n#if SDF_HI_RES\n  #if SDF_DUAL_CHANNEL\n  float GetAlpha(sampler2D texture, vec2 st) {\n    vec2 uv = st.xy * texSize.xy;\n    vec2 uv00 = floor(uv - vec2(0.5));\n    vec2 uvlerp = uv - uv00 - vec2(0.5);\n    vec4 onestep = vec4(texSize.zw, 0., 0.5);\n    vec2 st00 = (uv00  + onestep.ww) * texSize.zw;\n    vec2 rawtex00 = texture2D(texture, st00).ar;\n    vec2 rawtex10 = texture2D(texture, st00 + onestep.xz).ar;\n    vec2 rawtex01 = texture2D(texture, st00 + onestep.zy).ar;\n    vec2 rawtex11 = texture2D(texture, st00 + onestep.xy).ar;\n        rawtex00.r = rawtex00.g * 0.00390625 + rawtex00.r;;\n    rawtex10.r = rawtex10.g * 0.00390625 + rawtex10.r;;\n    rawtex01.r = rawtex01.g * 0.00390625 + rawtex01.r;;\n    rawtex11.r = rawtex11.g * 0.00390625 + rawtex11.r;;\n    vec2 D00_10 = vec2(rawtex00.r, rawtex10.r);\n    vec2 D01_11 = vec2(rawtex01.r, rawtex11.r);\n    vec2 D0_1 = mix(D00_10, D01_11, uvlerp.y);\n    return mix(D0_1.x, D0_1.y, uvlerp.x);\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    return GetAlpha(texture, st) * 256. - 128.;\n  }\n  #else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return 16.0 * (alpha - 0.5);\n  }\n  #endif\n#else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return (alpha * 2. - 1.) * maxDist.x;\n  }\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nfloat CircleSDF(vec2 uv, vec2 o, float offset) {\n  float dist = distance(uv, o) * 2. - 1.;\n  dist += offset;\n  return (-dist) * texSize.x * maxDist.y * 0.25;\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  vec2 o = uv * 2.0 - 1.0;\n  o.y *= texSize.y * texSize.z;\n  float D = GetD(texture, uv);\n  float alpha = D * maxDist.y;\n  float circle = CircleSDF(o, vec2(0., 0.), 0.15);\n  float t = cc_time.x;\n  alpha = mix(circle, alpha, smoothstep(0.35, 0.65, sin(t * 2.0) * 0.5 + 0.5));\n  float outlineWidth = 0.1;\n  float aastep = max(fwidth(alpha), 1e-8);\n  float mask = smoothstep(aastep, -aastep, abs(alpha) - outlineWidth);\n  gl_FragColor = vec4(0., 1., 0., mask);\n}"
        },
        "builtins": {
          "globals": {
            "blocks": [
              {
                "name": "CCGlobal",
                "defines": []
              }
            ],
            "samplers": []
          },
          "locals": {
            "blocks": [
              {
                "name": "CCLocal",
                "defines": []
              }
            ],
            "samplers": []
          }
        },
        "defines": [
          {
            "name": "SDF_HI_RES",
            "type": "boolean",
            "defines": []
          },
          {
            "name": "SDF_DUAL_CHANNEL",
            "type": "boolean",
            "defines": [
              "SDF_HI_RES"
            ]
          }
        ],
        "blocks": [
          {
            "name": "SDFARGS",
            "members": [
              {
                "name": "texSize",
                "type": 16,
                "count": 1
              },
              {
                "name": "maxDist",
                "type": 14,
                "count": 1
              }
            ],
            "defines": [],
            "binding": 0
          }
        ],
        "samplers": [
          {
            "name": "texture",
            "type": 29,
            "count": 1,
            "defines": [],
            "binding": 30
          }
        ],
        "record": null,
        "name": "SDFMorph|vs|fs"
      }
    ]
  },
  {
    "__type__": "cc.EffectAsset",
    "_name": "SDFSquiggle",
    "techniques": [
      {
        "passes": [
          {
            "blendState": {
              "targets": [
                {
                  "blend": true
                }
              ]
            },
            "rasterizerState": {
              "cullMode": 0
            },
            "properties": {
              "texture": {
                "value": "white",
                "type": 29
              }
            },
            "program": "SDFSquiggle|vs|fs"
          }
        ]
      }
    ],
    "shaders": [
      {
        "hash": 2779374896,
        "glsl3": {
          "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform SDFARGS {\n  vec4 texSize;\n  vec2 maxDist;\n};\n#if SDF_HI_RES\n  #if SDF_DUAL_CHANNEL\n  float GetAlpha(sampler2D texture, vec2 st) {\n    vec2 uv = st.xy * texSize.xy;\n    vec2 uv00 = floor(uv - vec2(0.5));\n    vec2 uvlerp = uv - uv00 - vec2(0.5);\n    vec4 onestep = vec4(texSize.zw, 0., 0.5);\n    vec2 st00 = (uv00  + onestep.ww) * texSize.zw;\n    vec2 rawtex00 = texture2D(texture, st00).ar;\n    vec2 rawtex10 = texture2D(texture, st00 + onestep.xz).ar;\n    vec2 rawtex01 = texture2D(texture, st00 + onestep.zy).ar;\n    vec2 rawtex11 = texture2D(texture, st00 + onestep.xy).ar;\n        rawtex00.r = rawtex00.g * 0.00390625 + rawtex00.r;;\n    rawtex10.r = rawtex10.g * 0.00390625 + rawtex10.r;;\n    rawtex01.r = rawtex01.g * 0.00390625 + rawtex01.r;;\n    rawtex11.r = rawtex11.g * 0.00390625 + rawtex11.r;;\n    vec2 D00_10 = vec2(rawtex00.r, rawtex10.r);\n    vec2 D01_11 = vec2(rawtex01.r, rawtex11.r);\n    vec2 D0_1 = mix(D00_10, D01_11, uvlerp.y);\n    return mix(D0_1.x, D0_1.y, uvlerp.x);\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    return GetAlpha(texture, st) * 256. - 128.;\n  }\n  #else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return 16.0 * (alpha - 0.5);\n  }\n  #endif\n#else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return (alpha * 2. - 1.) * maxDist.x;\n  }\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nin vec2 v_uv1;\nuniform sampler2D texture;\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                        vec2(12.9898,78.233)))\n                * 43758.5453123);\n}\nfloat noise (in vec2 st) {\n  vec2 i = floor(st);\n  vec2 f = fract(st);\n  float a = random(i);\n  float b = random(i + vec2(1.0, 0.0));\n  float c = random(i + vec2(0.0, 1.0));\n  float d = random(i + vec2(1.0, 1.0));\n  vec2 u = f*f*(3.0-2.0*f);\n  return mix(a, b, u.x) +\n          (c - a)* u.y * (1.0 - u.x) +\n          (d - b) * u.x * u.y;\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  float D = GetD(texture, uv);\n  D = -D;\n  float seed = mod(floor(cc_time.x * 3.), 5.);\n  D = D + 3.0 * noise(20. * uv + seed);\n  float mask = 1.0 - smoothstep(-2.0, -1.0, D) + smoothstep(1.0, 2.0, D);\n  gl_FragColor = vec4(vec3(1.-mask), 1.-mask);\n}"
        },
        "glsl1": {
          "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\nprecision highp float;\nuniform vec4 cc_time;\nuniform vec4 texSize;\nuniform vec2 maxDist;\n#if SDF_HI_RES\n  #if SDF_DUAL_CHANNEL\n  float GetAlpha(sampler2D texture, vec2 st) {\n    vec2 uv = st.xy * texSize.xy;\n    vec2 uv00 = floor(uv - vec2(0.5));\n    vec2 uvlerp = uv - uv00 - vec2(0.5);\n    vec4 onestep = vec4(texSize.zw, 0., 0.5);\n    vec2 st00 = (uv00  + onestep.ww) * texSize.zw;\n    vec2 rawtex00 = texture2D(texture, st00).ar;\n    vec2 rawtex10 = texture2D(texture, st00 + onestep.xz).ar;\n    vec2 rawtex01 = texture2D(texture, st00 + onestep.zy).ar;\n    vec2 rawtex11 = texture2D(texture, st00 + onestep.xy).ar;\n        rawtex00.r = rawtex00.g * 0.00390625 + rawtex00.r;;\n    rawtex10.r = rawtex10.g * 0.00390625 + rawtex10.r;;\n    rawtex01.r = rawtex01.g * 0.00390625 + rawtex01.r;;\n    rawtex11.r = rawtex11.g * 0.00390625 + rawtex11.r;;\n    vec2 D00_10 = vec2(rawtex00.r, rawtex10.r);\n    vec2 D01_11 = vec2(rawtex01.r, rawtex11.r);\n    vec2 D0_1 = mix(D00_10, D01_11, uvlerp.y);\n    return mix(D0_1.x, D0_1.y, uvlerp.x);\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    return GetAlpha(texture, st) * 256. - 128.;\n  }\n  #else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return 16.0 * (alpha - 0.5);\n  }\n  #endif\n#else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return (alpha * 2. - 1.) * maxDist.x;\n  }\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nvarying vec2 v_uv1;\nuniform sampler2D texture;\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                        vec2(12.9898,78.233)))\n                * 43758.5453123);\n}\nfloat noise (in vec2 st) {\n  vec2 i = floor(st);\n  vec2 f = fract(st);\n  float a = random(i);\n  float b = random(i + vec2(1.0, 0.0));\n  float c = random(i + vec2(0.0, 1.0));\n  float d = random(i + vec2(1.0, 1.0));\n  vec2 u = f*f*(3.0-2.0*f);\n  return mix(a, b, u.x) +\n          (c - a)* u.y * (1.0 - u.x) +\n          (d - b) * u.x * u.y;\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  float D = GetD(texture, uv);\n  D = -D;\n  float seed = mod(floor(cc_time.x * 3.), 5.);\n  D = D + 3.0 * noise(20. * uv + seed);\n  float mask = 1.0 - smoothstep(-2.0, -1.0, D) + smoothstep(1.0, 2.0, D);\n  gl_FragColor = vec4(vec3(1.-mask), 1.-mask);\n}"
        },
        "builtins": {
          "globals": {
            "blocks": [
              {
                "name": "CCGlobal",
                "defines": []
              }
            ],
            "samplers": []
          },
          "locals": {
            "blocks": [
              {
                "name": "CCLocal",
                "defines": []
              }
            ],
            "samplers": []
          }
        },
        "defines": [
          {
            "name": "SDF_HI_RES",
            "type": "boolean",
            "defines": []
          },
          {
            "name": "SDF_DUAL_CHANNEL",
            "type": "boolean",
            "defines": [
              "SDF_HI_RES"
            ]
          }
        ],
        "blocks": [
          {
            "name": "SDFARGS",
            "members": [
              {
                "name": "texSize",
                "type": 16,
                "count": 1
              },
              {
                "name": "maxDist",
                "type": 14,
                "count": 1
              }
            ],
            "defines": [],
            "binding": 0
          }
        ],
        "samplers": [
          {
            "name": "texture",
            "type": 29,
            "count": 1,
            "defines": [],
            "binding": 30
          }
        ],
        "record": null,
        "name": "SDFSquiggle|vs|fs"
      }
    ]
  },
  {
    "__type__": "cc.EffectAsset",
    "_name": "SpriteRaw",
    "techniques": [
      {
        "passes": [
          {
            "blendState": {
              "targets": [
                {
                  "blend": true
                }
              ]
            },
            "rasterizerState": {
              "cullMode": 0
            },
            "properties": {
              "texture": {
                "value": "white",
                "type": 29
              }
            },
            "program": "SpriteRaw|vs|fs"
          }
        ]
      }
    ],
    "shaders": [
      {
        "hash": 383555269,
        "glsl3": {
          "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform SDFARGS {\n  vec4 texSize;\n  vec2 maxDist;\n};\n#if SDF_HI_RES\n  #if SDF_DUAL_CHANNEL\n  #else\n  #endif\n#else\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  gl_FragColor = texture2D(texture, uv);\n}"
        },
        "glsl1": {
          "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\nprecision highp float;\n#if SDF_HI_RES\n  #if SDF_DUAL_CHANNEL\n  #else\n  #endif\n#else\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  gl_FragColor = texture2D(texture, uv);\n}"
        },
        "builtins": {
          "globals": {
            "blocks": [
              {
                "name": "CCGlobal",
                "defines": []
              }
            ],
            "samplers": []
          },
          "locals": {
            "blocks": [
              {
                "name": "CCLocal",
                "defines": []
              }
            ],
            "samplers": []
          }
        },
        "defines": [
          {
            "name": "SDF_HI_RES",
            "type": "boolean",
            "defines": []
          },
          {
            "name": "SDF_DUAL_CHANNEL",
            "type": "boolean",
            "defines": [
              "SDF_HI_RES"
            ]
          }
        ],
        "blocks": [
          {
            "name": "SDFARGS",
            "members": [
              {
                "name": "texSize",
                "type": 16,
                "count": 1
              },
              {
                "name": "maxDist",
                "type": 14,
                "count": 1
              }
            ],
            "defines": [],
            "binding": 0
          }
        ],
        "samplers": [
          {
            "name": "texture",
            "type": 29,
            "count": 1,
            "defines": [],
            "binding": 30
          }
        ],
        "record": null,
        "name": "SpriteRaw|vs|fs"
      }
    ]
  },
  {
    "__type__": "cc.Material",
    "_name": "SDFContour",
    "_effectAsset": {
      "__uuid__": "8eij6FhypPY7yMld28YHW2"
    },
    "_techniqueData": {
      "0": {
        "props": {
          "texture": {
            "__uuid__": "79C8YJ7jRBnZC3oX32MH83"
          }
        },
        "defines": {
          "SDF_HI_RES": false,
          "SDF_DUAL_CHANNEL": false
        }
      }
    }
  },
  {
    "__type__": "cc.SpriteFrame",
    "content": {
      "name": "quit300x80",
      "texture": "0a0tBgmtlLNZLdbvgcEDeu",
      "rect": [
        0,
        0,
        300,
        80
      ],
      "offset": [
        0,
        0
      ],
      "originalSize": [
        300,
        80
      ],
      "capInsets": [
        0,
        0,
        0,
        0
      ]
    }
  },
  {
    "__type__": "cc.Material",
    "_name": "SpriteRaw",
    "_effectAsset": {
      "__uuid__": "52EeEkUvdAYpuYW0hCKkYk"
    },
    "_techniqueData": {
      "0": {
        "props": {
          "texture": {
            "__uuid__": "79C8YJ7jRBnZC3oX32MH83"
          }
        }
      }
    }
  },
  {
    "__type__": "cc.SpriteFrame",
    "content": {
      "name": "GT_sdf",
      "texture": "3c2B92/dxO+KWP+wqLahE2",
      "rect": [
        9,
        0,
        159,
        176
      ],
      "offset": [
        0.5,
        0
      ],
      "originalSize": [
        176,
        176
      ],
      "capInsets": [
        0,
        0,
        0,
        0
      ]
    }
  },
  {
    "__type__": "cc.EffectAsset",
    "_name": "SDFSelect",
    "techniques": [
      {
        "passes": [
          {
            "blendState": {
              "targets": [
                {
                  "blend": true
                }
              ]
            },
            "rasterizerState": {
              "cullMode": 0
            },
            "properties": {
              "texture": {
                "value": "white",
                "type": 29
              }
            },
            "program": "SDFSelect|vs|fs"
          }
        ]
      }
    ],
    "shaders": [
      {
        "hash": 417618606,
        "glsl3": {
          "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\n#extension GL_OES_standard_derivatives: enable\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform SDFARGS {\n  vec4 texSize;\n  vec2 maxDist;\n};\n#if SDF_HI_RES\n  #if SDF_DUAL_CHANNEL\n  float GetAlpha(sampler2D texture, vec2 st) {\n    vec2 uv = st.xy * texSize.xy;\n    vec2 uv00 = floor(uv - vec2(0.5));\n    vec2 uvlerp = uv - uv00 - vec2(0.5);\n    vec4 onestep = vec4(texSize.zw, 0., 0.5);\n    vec2 st00 = (uv00  + onestep.ww) * texSize.zw;\n    vec2 rawtex00 = texture2D(texture, st00).ar;\n    vec2 rawtex10 = texture2D(texture, st00 + onestep.xz).ar;\n    vec2 rawtex01 = texture2D(texture, st00 + onestep.zy).ar;\n    vec2 rawtex11 = texture2D(texture, st00 + onestep.xy).ar;\n        rawtex00.r = rawtex00.g * 0.00390625 + rawtex00.r;;\n    rawtex10.r = rawtex10.g * 0.00390625 + rawtex10.r;;\n    rawtex01.r = rawtex01.g * 0.00390625 + rawtex01.r;;\n    rawtex11.r = rawtex11.g * 0.00390625 + rawtex11.r;;\n    vec2 D00_10 = vec2(rawtex00.r, rawtex10.r);\n    vec2 D01_11 = vec2(rawtex01.r, rawtex11.r);\n    vec2 D0_1 = mix(D00_10, D01_11, uvlerp.y);\n    return mix(D0_1.x, D0_1.y, uvlerp.x);\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    return GetAlpha(texture, st) * 256. - 128.;\n  }\n  #else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return 16.0 * (alpha - 0.5);\n  }\n  #endif\n#else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return (alpha * 2. - 1.) * maxDist.x;\n  }\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nin vec2 v_uv1;\nuniform sampler2D texture;\nfloat Remap01(float a, float b, float t) {\n  return (t-a) / (b-a);\n}\nfloat Remap(float a, float b, float c, float d, float t) {\n  return Remap01(a, b, t) * (d-c) + c;\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  float w = 2.;\n  float offset = Remap(0., 1.0, w, w+6., abs(sin(cc_time.x * 4.0)));\n  float D = GetD(texture, uv) + offset;\n  float aastep = max(fwidth(D), 1e-8);\n  float mask = smoothstep(aastep, -aastep, abs(D)-w);\n  gl_FragColor = vec4(0., 1., 0., mask);\n}"
        },
        "glsl1": {
          "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\n#extension GL_OES_standard_derivatives: enable\nprecision highp float;\nuniform vec4 cc_time;\nuniform vec4 texSize;\nuniform vec2 maxDist;\n#if SDF_HI_RES\n  #if SDF_DUAL_CHANNEL\n  float GetAlpha(sampler2D texture, vec2 st) {\n    vec2 uv = st.xy * texSize.xy;\n    vec2 uv00 = floor(uv - vec2(0.5));\n    vec2 uvlerp = uv - uv00 - vec2(0.5);\n    vec4 onestep = vec4(texSize.zw, 0., 0.5);\n    vec2 st00 = (uv00  + onestep.ww) * texSize.zw;\n    vec2 rawtex00 = texture2D(texture, st00).ar;\n    vec2 rawtex10 = texture2D(texture, st00 + onestep.xz).ar;\n    vec2 rawtex01 = texture2D(texture, st00 + onestep.zy).ar;\n    vec2 rawtex11 = texture2D(texture, st00 + onestep.xy).ar;\n        rawtex00.r = rawtex00.g * 0.00390625 + rawtex00.r;;\n    rawtex10.r = rawtex10.g * 0.00390625 + rawtex10.r;;\n    rawtex01.r = rawtex01.g * 0.00390625 + rawtex01.r;;\n    rawtex11.r = rawtex11.g * 0.00390625 + rawtex11.r;;\n    vec2 D00_10 = vec2(rawtex00.r, rawtex10.r);\n    vec2 D01_11 = vec2(rawtex01.r, rawtex11.r);\n    vec2 D0_1 = mix(D00_10, D01_11, uvlerp.y);\n    return mix(D0_1.x, D0_1.y, uvlerp.x);\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    return GetAlpha(texture, st) * 256. - 128.;\n  }\n  #else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return 16.0 * (alpha - 0.5);\n  }\n  #endif\n#else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return (alpha * 2. - 1.) * maxDist.x;\n  }\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nvarying vec2 v_uv1;\nuniform sampler2D texture;\nfloat Remap01(float a, float b, float t) {\n  return (t-a) / (b-a);\n}\nfloat Remap(float a, float b, float c, float d, float t) {\n  return Remap01(a, b, t) * (d-c) + c;\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  float w = 2.;\n  float offset = Remap(0., 1.0, w, w+6., abs(sin(cc_time.x * 4.0)));\n  float D = GetD(texture, uv) + offset;\n  float aastep = max(fwidth(D), 1e-8);\n  float mask = smoothstep(aastep, -aastep, abs(D)-w);\n  gl_FragColor = vec4(0., 1., 0., mask);\n}"
        },
        "builtins": {
          "globals": {
            "blocks": [
              {
                "name": "CCGlobal",
                "defines": []
              }
            ],
            "samplers": []
          },
          "locals": {
            "blocks": [
              {
                "name": "CCLocal",
                "defines": []
              }
            ],
            "samplers": []
          }
        },
        "defines": [
          {
            "name": "SDF_HI_RES",
            "type": "boolean",
            "defines": []
          },
          {
            "name": "SDF_DUAL_CHANNEL",
            "type": "boolean",
            "defines": [
              "SDF_HI_RES"
            ]
          }
        ],
        "blocks": [
          {
            "name": "SDFARGS",
            "members": [
              {
                "name": "texSize",
                "type": 16,
                "count": 1
              },
              {
                "name": "maxDist",
                "type": 14,
                "count": 1
              }
            ],
            "defines": [],
            "binding": 0
          }
        ],
        "samplers": [
          {
            "name": "texture",
            "type": 29,
            "count": 1,
            "defines": [],
            "binding": 30
          }
        ],
        "record": null,
        "name": "SDFSelect|vs|fs"
      }
    ]
  },
  {
    "__type__": "cc.Material",
    "_name": "SDFOutline0",
    "_effectAsset": {
      "__uuid__": "achF+nJTtIkLm0if/6WOSG"
    },
    "_techniqueData": {
      "0": {
        "props": {
          "texSize": {
            "__type__": "cc.Vec2",
            "x": 98,
            "y": 229
          },
          "texture": {
            "__uuid__": "79C8YJ7jRBnZC3oX32MH83"
          }
        },
        "defines": {
          "SDF_DUAL_CHANNEL": true,
          "SDF_HI_RES": true
        }
      }
    }
  },
  {
    "__type__": "cc.Material",
    "_name": "SDFSquiggle",
    "_effectAsset": {
      "__uuid__": "4cCpfaRwVJ2o4UMBaudKzo"
    },
    "_techniqueData": {
      "0": {
        "props": {
          "texture": {
            "__uuid__": "79C8YJ7jRBnZC3oX32MH83"
          }
        },
        "defines": {
          "SDF_HI_RES": false,
          "SDF_DUAL_CHANNEL": false
        }
      }
    }
  },
  {
    "__type__": "cc.EffectAsset",
    "_name": "SDFContour",
    "techniques": [
      {
        "passes": [
          {
            "blendState": {
              "targets": [
                {
                  "blend": true
                }
              ]
            },
            "rasterizerState": {
              "cullMode": 0
            },
            "properties": {
              "texture": {
                "value": "white",
                "type": 29
              }
            },
            "program": "SDFContour|vs|fs"
          }
        ]
      }
    ],
    "shaders": [
      {
        "hash": 194153468,
        "glsl3": {
          "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\n#extension GL_OES_standard_derivatives: enable\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform SDFARGS {\n  vec4 texSize;\n  vec2 maxDist;\n};\n#if SDF_HI_RES\n  #if SDF_DUAL_CHANNEL\n  float GetAlpha(sampler2D texture, vec2 st) {\n    vec2 uv = st.xy * texSize.xy;\n    vec2 uv00 = floor(uv - vec2(0.5));\n    vec2 uvlerp = uv - uv00 - vec2(0.5);\n    vec4 onestep = vec4(texSize.zw, 0., 0.5);\n    vec2 st00 = (uv00  + onestep.ww) * texSize.zw;\n    vec2 rawtex00 = texture2D(texture, st00).ar;\n    vec2 rawtex10 = texture2D(texture, st00 + onestep.xz).ar;\n    vec2 rawtex01 = texture2D(texture, st00 + onestep.zy).ar;\n    vec2 rawtex11 = texture2D(texture, st00 + onestep.xy).ar;\n        rawtex00.r = rawtex00.g * 0.00390625 + rawtex00.r;;\n    rawtex10.r = rawtex10.g * 0.00390625 + rawtex10.r;;\n    rawtex01.r = rawtex01.g * 0.00390625 + rawtex01.r;;\n    rawtex11.r = rawtex11.g * 0.00390625 + rawtex11.r;;\n    vec2 D00_10 = vec2(rawtex00.r, rawtex10.r);\n    vec2 D01_11 = vec2(rawtex01.r, rawtex11.r);\n    vec2 D0_1 = mix(D00_10, D01_11, uvlerp.y);\n    return mix(D0_1.x, D0_1.y, uvlerp.x);\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    return GetAlpha(texture, st) * 256. - 128.;\n  }\n  #else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return 16.0 * (alpha - 0.5);\n  }\n  #endif\n#else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return (alpha * 2. - 1.) * maxDist.x;\n  }\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nin vec2 v_uv1;\nuniform sampler2D texture;\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  float D = GetD(texture, uv);\n  float aastep = max(fwidth(D), 1e-8);\n  float grid = 14.;\n  D = mod(D, grid);\n  float w = 0.5;\n  float mask = smoothstep(aastep, -aastep, abs(D - grid * 0.5) - w);\n  gl_FragColor = vec4(vec3(1.0), mask);\n}"
        },
        "glsl1": {
          "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\n#extension GL_OES_standard_derivatives: enable\nprecision highp float;\nuniform vec4 texSize;\nuniform vec2 maxDist;\n#if SDF_HI_RES\n  #if SDF_DUAL_CHANNEL\n  float GetAlpha(sampler2D texture, vec2 st) {\n    vec2 uv = st.xy * texSize.xy;\n    vec2 uv00 = floor(uv - vec2(0.5));\n    vec2 uvlerp = uv - uv00 - vec2(0.5);\n    vec4 onestep = vec4(texSize.zw, 0., 0.5);\n    vec2 st00 = (uv00  + onestep.ww) * texSize.zw;\n    vec2 rawtex00 = texture2D(texture, st00).ar;\n    vec2 rawtex10 = texture2D(texture, st00 + onestep.xz).ar;\n    vec2 rawtex01 = texture2D(texture, st00 + onestep.zy).ar;\n    vec2 rawtex11 = texture2D(texture, st00 + onestep.xy).ar;\n        rawtex00.r = rawtex00.g * 0.00390625 + rawtex00.r;;\n    rawtex10.r = rawtex10.g * 0.00390625 + rawtex10.r;;\n    rawtex01.r = rawtex01.g * 0.00390625 + rawtex01.r;;\n    rawtex11.r = rawtex11.g * 0.00390625 + rawtex11.r;;\n    vec2 D00_10 = vec2(rawtex00.r, rawtex10.r);\n    vec2 D01_11 = vec2(rawtex01.r, rawtex11.r);\n    vec2 D0_1 = mix(D00_10, D01_11, uvlerp.y);\n    return mix(D0_1.x, D0_1.y, uvlerp.x);\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    return GetAlpha(texture, st) * 256. - 128.;\n  }\n  #else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return 16.0 * (alpha - 0.5);\n  }\n  #endif\n#else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return (alpha * 2. - 1.) * maxDist.x;\n  }\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nvarying vec2 v_uv1;\nuniform sampler2D texture;\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  float D = GetD(texture, uv);\n  float aastep = max(fwidth(D), 1e-8);\n  float grid = 14.;\n  D = mod(D, grid);\n  float w = 0.5;\n  float mask = smoothstep(aastep, -aastep, abs(D - grid * 0.5) - w);\n  gl_FragColor = vec4(vec3(1.0), mask);\n}"
        },
        "builtins": {
          "globals": {
            "blocks": [
              {
                "name": "CCGlobal",
                "defines": []
              }
            ],
            "samplers": []
          },
          "locals": {
            "blocks": [
              {
                "name": "CCLocal",
                "defines": []
              }
            ],
            "samplers": []
          }
        },
        "defines": [
          {
            "name": "SDF_HI_RES",
            "type": "boolean",
            "defines": []
          },
          {
            "name": "SDF_DUAL_CHANNEL",
            "type": "boolean",
            "defines": [
              "SDF_HI_RES"
            ]
          }
        ],
        "blocks": [
          {
            "name": "SDFARGS",
            "members": [
              {
                "name": "texSize",
                "type": 16,
                "count": 1
              },
              {
                "name": "maxDist",
                "type": 14,
                "count": 1
              }
            ],
            "defines": [],
            "binding": 0
          }
        ],
        "samplers": [
          {
            "name": "texture",
            "type": 29,
            "count": 1,
            "defines": [],
            "binding": 30
          }
        ],
        "record": null,
        "name": "SDFContour|vs|fs"
      }
    ]
  },
  {
    "__type__": "cc.SpriteFrame",
    "content": {
      "name": "Weapons_0010_Capa-8 (2)",
      "texture": "f0Ki7PZfNKH7641q0erwgx",
      "rect": [
        0,
        0,
        98,
        229
      ],
      "offset": [
        0,
        0
      ],
      "originalSize": [
        98,
        229
      ],
      "capInsets": [
        0,
        0,
        0,
        0
      ]
    }
  },
  {
    "__type__": "cc.EffectAsset",
    "_name": "SDFFake3D",
    "techniques": [
      {
        "passes": [
          {
            "blendState": {
              "targets": [
                {
                  "blend": true
                }
              ]
            },
            "rasterizerState": {
              "cullMode": 0
            },
            "properties": {
              "texture": {
                "value": "white",
                "type": 29
              }
            },
            "program": "SDFFake3D|vs|fs"
          }
        ]
      }
    ],
    "shaders": [
      {
        "hash": 1834773816,
        "glsl3": {
          "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\n#extension GL_OES_standard_derivatives: enable\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform SDFARGS {\n  vec4 texSize;\n  vec2 maxDist;\n};\n#if SDF_HI_RES\n  #if SDF_DUAL_CHANNEL\n  float GetAlpha(sampler2D texture, vec2 st) {\n    vec2 uv = st.xy * texSize.xy;\n    vec2 uv00 = floor(uv - vec2(0.5));\n    vec2 uvlerp = uv - uv00 - vec2(0.5);\n    vec4 onestep = vec4(texSize.zw, 0., 0.5);\n    vec2 st00 = (uv00  + onestep.ww) * texSize.zw;\n    vec2 rawtex00 = texture2D(texture, st00).ar;\n    vec2 rawtex10 = texture2D(texture, st00 + onestep.xz).ar;\n    vec2 rawtex01 = texture2D(texture, st00 + onestep.zy).ar;\n    vec2 rawtex11 = texture2D(texture, st00 + onestep.xy).ar;\n        rawtex00.r = rawtex00.g * 0.00390625 + rawtex00.r;;\n    rawtex10.r = rawtex10.g * 0.00390625 + rawtex10.r;;\n    rawtex01.r = rawtex01.g * 0.00390625 + rawtex01.r;;\n    rawtex11.r = rawtex11.g * 0.00390625 + rawtex11.r;;\n    vec2 D00_10 = vec2(rawtex00.r, rawtex10.r);\n    vec2 D01_11 = vec2(rawtex01.r, rawtex11.r);\n    vec2 D0_1 = mix(D00_10, D01_11, uvlerp.y);\n    return mix(D0_1.x, D0_1.y, uvlerp.x);\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    return GetAlpha(texture, st) * 256. - 128.;\n  }\n  #else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return 16.0 * (alpha - 0.5);\n  }\n  #endif\n#else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return (alpha * 2. - 1.) * maxDist.x;\n  }\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nin vec2 v_uv1;\nuniform sampler2D texture;\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  float D = GetD(texture, uv);\n  float aastep = fwidth(D);\n  vec2 delta = vec2(dFdx(D), dFdy(D));\n  vec2 lightPos = vec2(1., -1.);\n  float brightNess = dot(normalize(delta), normalize(lightPos));\n  float w = 4.;\n  float edgeMask = smoothstep(aastep, -aastep, abs(D + w) - w);\n  float insideMask = smoothstep(-aastep, aastep, D);\n  delta = delta * 0.5 + 0.5;\n  vec3 color = vec3(brightNess * edgeMask) + vec3(1.0) * insideMask;\n  color *= vec3(1., 213./255., 0.);\n  vec3 bg = vec3(1.0);\n  color = mix(bg, color, clamp(edgeMask + insideMask, 0., 1.));\n  gl_FragColor = vec4(color, 1.0);\n}"
        },
        "glsl1": {
          "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\n#extension GL_OES_standard_derivatives: enable\nprecision highp float;\nuniform vec4 texSize;\nuniform vec2 maxDist;\n#if SDF_HI_RES\n  #if SDF_DUAL_CHANNEL\n  float GetAlpha(sampler2D texture, vec2 st) {\n    vec2 uv = st.xy * texSize.xy;\n    vec2 uv00 = floor(uv - vec2(0.5));\n    vec2 uvlerp = uv - uv00 - vec2(0.5);\n    vec4 onestep = vec4(texSize.zw, 0., 0.5);\n    vec2 st00 = (uv00  + onestep.ww) * texSize.zw;\n    vec2 rawtex00 = texture2D(texture, st00).ar;\n    vec2 rawtex10 = texture2D(texture, st00 + onestep.xz).ar;\n    vec2 rawtex01 = texture2D(texture, st00 + onestep.zy).ar;\n    vec2 rawtex11 = texture2D(texture, st00 + onestep.xy).ar;\n        rawtex00.r = rawtex00.g * 0.00390625 + rawtex00.r;;\n    rawtex10.r = rawtex10.g * 0.00390625 + rawtex10.r;;\n    rawtex01.r = rawtex01.g * 0.00390625 + rawtex01.r;;\n    rawtex11.r = rawtex11.g * 0.00390625 + rawtex11.r;;\n    vec2 D00_10 = vec2(rawtex00.r, rawtex10.r);\n    vec2 D01_11 = vec2(rawtex01.r, rawtex11.r);\n    vec2 D0_1 = mix(D00_10, D01_11, uvlerp.y);\n    return mix(D0_1.x, D0_1.y, uvlerp.x);\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    return GetAlpha(texture, st) * 256. - 128.;\n  }\n  #else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return 16.0 * (alpha - 0.5);\n  }\n  #endif\n#else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return (alpha * 2. - 1.) * maxDist.x;\n  }\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nvarying vec2 v_uv1;\nuniform sampler2D texture;\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  float D = GetD(texture, uv);\n  float aastep = fwidth(D);\n  vec2 delta = vec2(dFdx(D), dFdy(D));\n  vec2 lightPos = vec2(1., -1.);\n  float brightNess = dot(normalize(delta), normalize(lightPos));\n  float w = 4.;\n  float edgeMask = smoothstep(aastep, -aastep, abs(D + w) - w);\n  float insideMask = smoothstep(-aastep, aastep, D);\n  delta = delta * 0.5 + 0.5;\n  vec3 color = vec3(brightNess * edgeMask) + vec3(1.0) * insideMask;\n  color *= vec3(1., 213./255., 0.);\n  vec3 bg = vec3(1.0);\n  color = mix(bg, color, clamp(edgeMask + insideMask, 0., 1.));\n  gl_FragColor = vec4(color, 1.0);\n}"
        },
        "builtins": {
          "globals": {
            "blocks": [
              {
                "name": "CCGlobal",
                "defines": []
              }
            ],
            "samplers": []
          },
          "locals": {
            "blocks": [
              {
                "name": "CCLocal",
                "defines": []
              }
            ],
            "samplers": []
          }
        },
        "defines": [
          {
            "name": "SDF_HI_RES",
            "type": "boolean",
            "defines": []
          },
          {
            "name": "SDF_DUAL_CHANNEL",
            "type": "boolean",
            "defines": [
              "SDF_HI_RES"
            ]
          }
        ],
        "blocks": [
          {
            "name": "SDFARGS",
            "members": [
              {
                "name": "texSize",
                "type": 16,
                "count": 1
              },
              {
                "name": "maxDist",
                "type": 14,
                "count": 1
              }
            ],
            "defines": [],
            "binding": 0
          }
        ],
        "samplers": [
          {
            "name": "texture",
            "type": 29,
            "count": 1,
            "defines": [],
            "binding": 30
          }
        ],
        "record": null,
        "name": "SDFFake3D|vs|fs"
      }
    ]
  },
  {
    "__type__": "cc.SpriteFrame",
    "content": {
      "name": "GT",
      "texture": "085JM5WT1J3Lag5R4fOTYt",
      "rect": [
        20,
        1,
        101,
        139
      ],
      "offset": [
        0.5,
        -0.5
      ],
      "originalSize": [
        140,
        140
      ],
      "capInsets": [
        0,
        0,
        0,
        0
      ]
    }
  },
  {
    "__type__": "cc.Material",
    "_name": "SDFGlow",
    "_effectAsset": {
      "__uuid__": "feVKcoh1dERbFsYQhGj7j5"
    },
    "_techniqueData": {
      "0": {
        "props": {
          "texture": {
            "__uuid__": "79C8YJ7jRBnZC3oX32MH83"
          }
        },
        "defines": {
          "SDF_HI_RES": false,
          "SDF_DUAL_CHANNEL": false
        }
      }
    }
  },
  {
    "__type__": "cc.Material",
    "_name": "SDFGradient",
    "_effectAsset": {
      "__uuid__": "cdsXZ+KTxACJR2tPxCZfWf"
    },
    "_techniqueData": {
      "0": {
        "props": {
          "texture": {
            "__uuid__": "79C8YJ7jRBnZC3oX32MH83"
          }
        }
      }
    }
  },
  {
    "__type__": "cc.EffectAsset",
    "_name": "SDFColorPallete",
    "techniques": [
      {
        "passes": [
          {
            "blendState": {
              "targets": [
                {
                  "blend": true
                }
              ]
            },
            "rasterizerState": {
              "cullMode": 0
            },
            "properties": {
              "texture": {
                "value": "white",
                "type": 29
              }
            },
            "program": "SDFColorPallete|vs|fs"
          }
        ]
      }
    ],
    "shaders": [
      {
        "hash": 2134544781,
        "glsl3": {
          "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\n#extension GL_OES_standard_derivatives: enable\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform SDFARGS {\n  vec4 texSize;\n  vec2 maxDist;\n};\n#if SDF_HI_RES\n  #if SDF_DUAL_CHANNEL\n  float GetAlpha(sampler2D texture, vec2 st) {\n    vec2 uv = st.xy * texSize.xy;\n    vec2 uv00 = floor(uv - vec2(0.5));\n    vec2 uvlerp = uv - uv00 - vec2(0.5);\n    vec4 onestep = vec4(texSize.zw, 0., 0.5);\n    vec2 st00 = (uv00  + onestep.ww) * texSize.zw;\n    vec2 rawtex00 = texture2D(texture, st00).ar;\n    vec2 rawtex10 = texture2D(texture, st00 + onestep.xz).ar;\n    vec2 rawtex01 = texture2D(texture, st00 + onestep.zy).ar;\n    vec2 rawtex11 = texture2D(texture, st00 + onestep.xy).ar;\n        rawtex00.r = rawtex00.g * 0.00390625 + rawtex00.r;;\n    rawtex10.r = rawtex10.g * 0.00390625 + rawtex10.r;;\n    rawtex01.r = rawtex01.g * 0.00390625 + rawtex01.r;;\n    rawtex11.r = rawtex11.g * 0.00390625 + rawtex11.r;;\n    vec2 D00_10 = vec2(rawtex00.r, rawtex10.r);\n    vec2 D01_11 = vec2(rawtex01.r, rawtex11.r);\n    vec2 D0_1 = mix(D00_10, D01_11, uvlerp.y);\n    return mix(D0_1.x, D0_1.y, uvlerp.x);\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    return GetAlpha(texture, st) * 256. - 128.;\n  }\n  #else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return 16.0 * (alpha - 0.5);\n  }\n  #endif\n#else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return (alpha * 2. - 1.) * maxDist.x;\n  }\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nin vec2 v_uv1;\nuniform sampler2D texture;\nvec3 Pallete(float t) {\n  vec3 dcOffset = vec3(0.938, 0.328, 0.718);\n  vec3 amp = vec3(0.659, 0.438, 0.328);\n  vec3 freq = vec3(0.388, 0.388, 0.296);\n  vec3 phase = vec3(2.538, 2.478, 0.168);\n  return dcOffset + amp * cos(2. * 3.14159 * (freq * t + phase));\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  float D = GetD(texture, uv);\n  float aastep = fwidth(D);\n  float w = 10.;\n  float mask = 1.0;\n  D = 0.5 - D / w * 0.5;\n  D -= cc_time.x;\n  vec3 color = Pallete(D);\n  gl_FragColor = vec4(color, mask);\n}"
        },
        "glsl1": {
          "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\n#extension GL_OES_standard_derivatives: enable\nprecision highp float;\nuniform vec4 cc_time;\nuniform vec4 texSize;\nuniform vec2 maxDist;\n#if SDF_HI_RES\n  #if SDF_DUAL_CHANNEL\n  float GetAlpha(sampler2D texture, vec2 st) {\n    vec2 uv = st.xy * texSize.xy;\n    vec2 uv00 = floor(uv - vec2(0.5));\n    vec2 uvlerp = uv - uv00 - vec2(0.5);\n    vec4 onestep = vec4(texSize.zw, 0., 0.5);\n    vec2 st00 = (uv00  + onestep.ww) * texSize.zw;\n    vec2 rawtex00 = texture2D(texture, st00).ar;\n    vec2 rawtex10 = texture2D(texture, st00 + onestep.xz).ar;\n    vec2 rawtex01 = texture2D(texture, st00 + onestep.zy).ar;\n    vec2 rawtex11 = texture2D(texture, st00 + onestep.xy).ar;\n        rawtex00.r = rawtex00.g * 0.00390625 + rawtex00.r;;\n    rawtex10.r = rawtex10.g * 0.00390625 + rawtex10.r;;\n    rawtex01.r = rawtex01.g * 0.00390625 + rawtex01.r;;\n    rawtex11.r = rawtex11.g * 0.00390625 + rawtex11.r;;\n    vec2 D00_10 = vec2(rawtex00.r, rawtex10.r);\n    vec2 D01_11 = vec2(rawtex01.r, rawtex11.r);\n    vec2 D0_1 = mix(D00_10, D01_11, uvlerp.y);\n    return mix(D0_1.x, D0_1.y, uvlerp.x);\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    return GetAlpha(texture, st) * 256. - 128.;\n  }\n  #else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return 16.0 * (alpha - 0.5);\n  }\n  #endif\n#else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return (alpha * 2. - 1.) * maxDist.x;\n  }\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nvarying vec2 v_uv1;\nuniform sampler2D texture;\nvec3 Pallete(float t) {\n  vec3 dcOffset = vec3(0.938, 0.328, 0.718);\n  vec3 amp = vec3(0.659, 0.438, 0.328);\n  vec3 freq = vec3(0.388, 0.388, 0.296);\n  vec3 phase = vec3(2.538, 2.478, 0.168);\n  return dcOffset + amp * cos(2. * 3.14159 * (freq * t + phase));\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  float D = GetD(texture, uv);\n  float aastep = fwidth(D);\n  float w = 10.;\n  float mask = 1.0;\n  D = 0.5 - D / w * 0.5;\n  D -= cc_time.x;\n  vec3 color = Pallete(D);\n  gl_FragColor = vec4(color, mask);\n}"
        },
        "builtins": {
          "globals": {
            "blocks": [
              {
                "name": "CCGlobal",
                "defines": []
              }
            ],
            "samplers": []
          },
          "locals": {
            "blocks": [
              {
                "name": "CCLocal",
                "defines": []
              }
            ],
            "samplers": []
          }
        },
        "defines": [
          {
            "name": "SDF_HI_RES",
            "type": "boolean",
            "defines": []
          },
          {
            "name": "SDF_DUAL_CHANNEL",
            "type": "boolean",
            "defines": [
              "SDF_HI_RES"
            ]
          }
        ],
        "blocks": [
          {
            "name": "SDFARGS",
            "members": [
              {
                "name": "texSize",
                "type": 16,
                "count": 1
              },
              {
                "name": "maxDist",
                "type": 14,
                "count": 1
              }
            ],
            "defines": [],
            "binding": 0
          }
        ],
        "samplers": [
          {
            "name": "texture",
            "type": 29,
            "count": 1,
            "defines": [],
            "binding": 30
          }
        ],
        "record": null,
        "name": "SDFColorPallete|vs|fs"
      }
    ]
  },
  {
    "__type__": "cc.Material",
    "_name": "SDFDropShadow",
    "_effectAsset": {
      "__uuid__": "42EINk9adKjrssPCb3oUtp"
    },
    "_techniqueData": {
      "0": {
        "props": {
          "texture": {
            "__uuid__": "79C8YJ7jRBnZC3oX32MH83"
          }
        },
        "defines": {
          "SDF_HI_RES": false,
          "SDF_DUAL_CHANNEL": false
        }
      }
    }
  },
  {
    "__type__": "cc.Material",
    "_name": "SDFSelect",
    "_effectAsset": {
      "__uuid__": "7angtuAkVEzZex8xK2cpTx"
    },
    "_techniqueData": {
      "0": {
        "props": {
          "texture": {
            "__uuid__": "79C8YJ7jRBnZC3oX32MH83"
          }
        }
      }
    }
  },
  {
    "__type__": "cc.EffectAsset",
    "_name": "SDFOutline0",
    "techniques": [
      {
        "passes": [
          {
            "blendState": {
              "targets": [
                {
                  "blend": true
                }
              ]
            },
            "rasterizerState": {
              "cullMode": 0
            },
            "properties": {
              "texture": {
                "value": "white",
                "type": 29
              },
              "texSize": {
                "value": [
                  128,
                  128,
                  0.0078125,
                  0.0078125
                ],
                "type": 16
              },
              "maxDist": {
                "value": [
                  8,
                  0.125
                ],
                "type": 14
              }
            },
            "program": "SDFOutline0|vs|fs"
          }
        ]
      }
    ],
    "shaders": [
      {
        "hash": 646410201,
        "glsl3": {
          "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\n#extension GL_OES_standard_derivatives: enable\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform SDFARGS {\n  vec4 texSize;\n  vec2 maxDist;\n};\n#if SDF_HI_RES\n  #if SDF_DUAL_CHANNEL\n  float GetAlpha(sampler2D texture, vec2 st) {\n    vec2 uv = st.xy * texSize.xy;\n    vec2 uv00 = floor(uv - vec2(0.5));\n    vec2 uvlerp = uv - uv00 - vec2(0.5);\n    vec4 onestep = vec4(texSize.zw, 0., 0.5);\n    vec2 st00 = (uv00  + onestep.ww) * texSize.zw;\n    vec2 rawtex00 = texture2D(texture, st00).ar;\n    vec2 rawtex10 = texture2D(texture, st00 + onestep.xz).ar;\n    vec2 rawtex01 = texture2D(texture, st00 + onestep.zy).ar;\n    vec2 rawtex11 = texture2D(texture, st00 + onestep.xy).ar;\n        rawtex00.r = rawtex00.g * 0.00390625 + rawtex00.r;;\n    rawtex10.r = rawtex10.g * 0.00390625 + rawtex10.r;;\n    rawtex01.r = rawtex01.g * 0.00390625 + rawtex01.r;;\n    rawtex11.r = rawtex11.g * 0.00390625 + rawtex11.r;;\n    vec2 D00_10 = vec2(rawtex00.r, rawtex10.r);\n    vec2 D01_11 = vec2(rawtex01.r, rawtex11.r);\n    vec2 D0_1 = mix(D00_10, D01_11, uvlerp.y);\n    return mix(D0_1.x, D0_1.y, uvlerp.x);\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    return GetAlpha(texture, st) * 256. - 128.;\n  }\n  #else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return 16.0 * (alpha - 0.5);\n  }\n  #endif\n#else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return (alpha * 2. - 1.) * maxDist.x;\n  }\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  float D = GetD(texture, uv);\n  float w = mod(floor(cc_time.x), 8.) + 0.5;\n  float aastep = fwidth(D);\n  aastep = max(aastep, 1e-8);\n  float mask = smoothstep(aastep, -aastep, abs(D)-w);\n  gl_FragColor = vec4(1., 1., 1., mask);\n}"
        },
        "glsl1": {
          "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\n#extension GL_OES_standard_derivatives: enable\nprecision highp float;\nuniform vec4 cc_time;\nuniform vec4 texSize;\nuniform vec2 maxDist;\n#if SDF_HI_RES\n  #if SDF_DUAL_CHANNEL\n  float GetAlpha(sampler2D texture, vec2 st) {\n    vec2 uv = st.xy * texSize.xy;\n    vec2 uv00 = floor(uv - vec2(0.5));\n    vec2 uvlerp = uv - uv00 - vec2(0.5);\n    vec4 onestep = vec4(texSize.zw, 0., 0.5);\n    vec2 st00 = (uv00  + onestep.ww) * texSize.zw;\n    vec2 rawtex00 = texture2D(texture, st00).ar;\n    vec2 rawtex10 = texture2D(texture, st00 + onestep.xz).ar;\n    vec2 rawtex01 = texture2D(texture, st00 + onestep.zy).ar;\n    vec2 rawtex11 = texture2D(texture, st00 + onestep.xy).ar;\n        rawtex00.r = rawtex00.g * 0.00390625 + rawtex00.r;;\n    rawtex10.r = rawtex10.g * 0.00390625 + rawtex10.r;;\n    rawtex01.r = rawtex01.g * 0.00390625 + rawtex01.r;;\n    rawtex11.r = rawtex11.g * 0.00390625 + rawtex11.r;;\n    vec2 D00_10 = vec2(rawtex00.r, rawtex10.r);\n    vec2 D01_11 = vec2(rawtex01.r, rawtex11.r);\n    vec2 D0_1 = mix(D00_10, D01_11, uvlerp.y);\n    return mix(D0_1.x, D0_1.y, uvlerp.x);\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    return GetAlpha(texture, st) * 256. - 128.;\n  }\n  #else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return 16.0 * (alpha - 0.5);\n  }\n  #endif\n#else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return (alpha * 2. - 1.) * maxDist.x;\n  }\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  float D = GetD(texture, uv);\n  float w = mod(floor(cc_time.x), 8.) + 0.5;\n  float aastep = fwidth(D);\n  aastep = max(aastep, 1e-8);\n  float mask = smoothstep(aastep, -aastep, abs(D)-w);\n  gl_FragColor = vec4(1., 1., 1., mask);\n}"
        },
        "builtins": {
          "globals": {
            "blocks": [
              {
                "name": "CCGlobal",
                "defines": []
              }
            ],
            "samplers": []
          },
          "locals": {
            "blocks": [
              {
                "name": "CCLocal",
                "defines": []
              }
            ],
            "samplers": []
          }
        },
        "defines": [
          {
            "name": "SDF_HI_RES",
            "type": "boolean",
            "defines": []
          },
          {
            "name": "SDF_DUAL_CHANNEL",
            "type": "boolean",
            "defines": [
              "SDF_HI_RES"
            ]
          }
        ],
        "blocks": [
          {
            "name": "SDFARGS",
            "members": [
              {
                "name": "texSize",
                "type": 16,
                "count": 1
              },
              {
                "name": "maxDist",
                "type": 14,
                "count": 1
              }
            ],
            "defines": [],
            "binding": 0
          }
        ],
        "samplers": [
          {
            "name": "texture",
            "type": 29,
            "count": 1,
            "defines": [],
            "binding": 30
          }
        ],
        "record": null,
        "name": "SDFOutline0|vs|fs"
      }
    ]
  },
  {
    "__type__": "cc.Material",
    "_name": "SDFFake3D",
    "_effectAsset": {
      "__uuid__": "91cW3k5WVFqLaLxfH5OU6Z"
    },
    "_techniqueData": {
      "0": {
        "props": {
          "texture": {
            "__uuid__": "79C8YJ7jRBnZC3oX32MH83"
          }
        },
        "defines": {
          "SDF_HI_RES": false,
          "SDF_DUAL_CHANNEL": false
        }
      }
    }
  },
  {
    "__type__": "cc.EffectAsset",
    "_name": "SDFOutline2",
    "techniques": [
      {
        "passes": [
          {
            "blendState": {
              "targets": [
                {
                  "blend": true
                }
              ]
            },
            "rasterizerState": {
              "cullMode": 0
            },
            "properties": {
              "texture": {
                "value": "white",
                "type": 29
              },
              "originTexture": {
                "value": "white",
                "type": 29
              }
            },
            "program": "SDFOutline2|vs|fs"
          }
        ]
      }
    ],
    "shaders": [
      {
        "hash": 1577187367,
        "glsl3": {
          "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform SDFARGS {\n  vec4 texSize;\n  vec2 maxDist;\n};\n#if SDF_HI_RES\n  #if SDF_DUAL_CHANNEL\n  float GetAlpha(sampler2D texture, vec2 st) {\n    vec2 uv = st.xy * texSize.xy;\n    vec2 uv00 = floor(uv - vec2(0.5));\n    vec2 uvlerp = uv - uv00 - vec2(0.5);\n    vec4 onestep = vec4(texSize.zw, 0., 0.5);\n    vec2 st00 = (uv00  + onestep.ww) * texSize.zw;\n    vec2 rawtex00 = texture2D(texture, st00).ar;\n    vec2 rawtex10 = texture2D(texture, st00 + onestep.xz).ar;\n    vec2 rawtex01 = texture2D(texture, st00 + onestep.zy).ar;\n    vec2 rawtex11 = texture2D(texture, st00 + onestep.xy).ar;\n        rawtex00.r = rawtex00.g * 0.00390625 + rawtex00.r;;\n    rawtex10.r = rawtex10.g * 0.00390625 + rawtex10.r;;\n    rawtex01.r = rawtex01.g * 0.00390625 + rawtex01.r;;\n    rawtex11.r = rawtex11.g * 0.00390625 + rawtex11.r;;\n    vec2 D00_10 = vec2(rawtex00.r, rawtex10.r);\n    vec2 D01_11 = vec2(rawtex01.r, rawtex11.r);\n    vec2 D0_1 = mix(D00_10, D01_11, uvlerp.y);\n    return mix(D0_1.x, D0_1.y, uvlerp.x);\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    return GetAlpha(texture, st) * 256. - 128.;\n  }\n  #else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return 16.0 * (alpha - 0.5);\n  }\n  #endif\n#else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return (alpha * 2. - 1.) * maxDist.x;\n  }\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nin vec2 v_uv1;\nuniform sampler2D texture;\nuniform sampler2D originTexture;\nfloat Remap01(float a, float b, float t) {\n  return (t-a) / (b-a);\n}\nfloat Remap(float a, float b, float c, float d, float t) {\n  return Remap01(a, b, t) * (d-c) + c;\n}\nfloat Pulse(float x) {\n  return pow(4.0 * x * (1.0 - x), 16.0);\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  float D = GetD(texture, uv);\n  D = D * maxDist.y * 0.5 + 0.5;\n  float alpha = D;\n  float offset = Remap(-1., 1., 0., 0.2, sin(cc_time.x * 2.0 * 3.141592653589793 + uv.y * 3.0));\n  float outlineWidth = 0.3 + offset * (uv.y);\n  float centerAlpha = 0.5;\n  float alphaDist = abs(alpha - centerAlpha);\n  float mask = smoothstep(outlineWidth, 0., alphaDist);\n  vec4 outlineColor = vec4(1., 0.5, 0., mask);\n  float brightness = 0.3;\n  outlineColor.rgb += clamp(Pulse((alphaDist + 0.5)) * brightness, 0., 1.);\n  vec2 uv2 = vec2(uv.x, 1.0-uv.y);\n  vec2 ratio = texSize.xy / (texSize.xy - vec2(maxDist.x * 2.));\n  uv2 = uv2 - 0.5;\n  uv2 *= ratio;\n  uv2 = uv2 + 0.5;\n  vec4 col = texture2D(originTexture, uv2);\n  col = mix(outlineColor, col, smoothstep(0.51, 0.55, alpha));\n  gl_FragColor = col;\n}"
        },
        "glsl1": {
          "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\nprecision highp float;\nuniform vec4 cc_time;\nuniform vec4 texSize;\nuniform vec2 maxDist;\n#if SDF_HI_RES\n  #if SDF_DUAL_CHANNEL\n  float GetAlpha(sampler2D texture, vec2 st) {\n    vec2 uv = st.xy * texSize.xy;\n    vec2 uv00 = floor(uv - vec2(0.5));\n    vec2 uvlerp = uv - uv00 - vec2(0.5);\n    vec4 onestep = vec4(texSize.zw, 0., 0.5);\n    vec2 st00 = (uv00  + onestep.ww) * texSize.zw;\n    vec2 rawtex00 = texture2D(texture, st00).ar;\n    vec2 rawtex10 = texture2D(texture, st00 + onestep.xz).ar;\n    vec2 rawtex01 = texture2D(texture, st00 + onestep.zy).ar;\n    vec2 rawtex11 = texture2D(texture, st00 + onestep.xy).ar;\n        rawtex00.r = rawtex00.g * 0.00390625 + rawtex00.r;;\n    rawtex10.r = rawtex10.g * 0.00390625 + rawtex10.r;;\n    rawtex01.r = rawtex01.g * 0.00390625 + rawtex01.r;;\n    rawtex11.r = rawtex11.g * 0.00390625 + rawtex11.r;;\n    vec2 D00_10 = vec2(rawtex00.r, rawtex10.r);\n    vec2 D01_11 = vec2(rawtex01.r, rawtex11.r);\n    vec2 D0_1 = mix(D00_10, D01_11, uvlerp.y);\n    return mix(D0_1.x, D0_1.y, uvlerp.x);\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    return GetAlpha(texture, st) * 256. - 128.;\n  }\n  #else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return 16.0 * (alpha - 0.5);\n  }\n  #endif\n#else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return (alpha * 2. - 1.) * maxDist.x;\n  }\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nvarying vec2 v_uv1;\nuniform sampler2D texture;\nuniform sampler2D originTexture;\nfloat Remap01(float a, float b, float t) {\n  return (t-a) / (b-a);\n}\nfloat Remap(float a, float b, float c, float d, float t) {\n  return Remap01(a, b, t) * (d-c) + c;\n}\nfloat Pulse(float x) {\n  return pow(4.0 * x * (1.0 - x), 16.0);\n}\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  float D = GetD(texture, uv);\n  D = D * maxDist.y * 0.5 + 0.5;\n  float alpha = D;\n  float offset = Remap(-1., 1., 0., 0.2, sin(cc_time.x * 2.0 * 3.141592653589793 + uv.y * 3.0));\n  float outlineWidth = 0.3 + offset * (uv.y);\n  float centerAlpha = 0.5;\n  float alphaDist = abs(alpha - centerAlpha);\n  float mask = smoothstep(outlineWidth, 0., alphaDist);\n  vec4 outlineColor = vec4(1., 0.5, 0., mask);\n  float brightness = 0.3;\n  outlineColor.rgb += clamp(Pulse((alphaDist + 0.5)) * brightness, 0., 1.);\n  vec2 uv2 = vec2(uv.x, 1.0-uv.y);\n  vec2 ratio = texSize.xy / (texSize.xy - vec2(maxDist.x * 2.));\n  uv2 = uv2 - 0.5;\n  uv2 *= ratio;\n  uv2 = uv2 + 0.5;\n  vec4 col = texture2D(originTexture, uv2);\n  col = mix(outlineColor, col, smoothstep(0.51, 0.55, alpha));\n  gl_FragColor = col;\n}"
        },
        "builtins": {
          "globals": {
            "blocks": [
              {
                "name": "CCGlobal",
                "defines": []
              }
            ],
            "samplers": []
          },
          "locals": {
            "blocks": [
              {
                "name": "CCLocal",
                "defines": []
              }
            ],
            "samplers": []
          }
        },
        "defines": [
          {
            "name": "SDF_HI_RES",
            "type": "boolean",
            "defines": []
          },
          {
            "name": "SDF_DUAL_CHANNEL",
            "type": "boolean",
            "defines": [
              "SDF_HI_RES"
            ]
          }
        ],
        "blocks": [
          {
            "name": "SDFARGS",
            "members": [
              {
                "name": "texSize",
                "type": 16,
                "count": 1
              },
              {
                "name": "maxDist",
                "type": 14,
                "count": 1
              }
            ],
            "defines": [],
            "binding": 0
          }
        ],
        "samplers": [
          {
            "name": "texture",
            "type": 29,
            "count": 1,
            "defines": [],
            "binding": 30
          },
          {
            "name": "originTexture",
            "type": 29,
            "count": 1,
            "defines": [],
            "binding": 31
          }
        ],
        "record": null,
        "name": "SDFOutline2|vs|fs"
      }
    ]
  },
  {
    "__type__": "cc.Material",
    "_name": "SDFColorPallete",
    "_effectAsset": {
      "__uuid__": "a4LaoY++BJfaShxBxAPEvM"
    },
    "_techniqueData": {
      "0": {
        "props": {
          "texture": {
            "__uuid__": "79C8YJ7jRBnZC3oX32MH83"
          }
        },
        "defines": {
          "SDF_HI_RES": false,
          "SDF_DUAL_CHANNEL": false
        }
      }
    }
  },
  {
    "__type__": "cc.EffectAsset",
    "_name": "SDFGradient",
    "techniques": [
      {
        "passes": [
          {
            "blendState": {
              "targets": [
                {
                  "blend": true
                }
              ]
            },
            "rasterizerState": {
              "cullMode": 0
            },
            "properties": {
              "texture": {
                "value": "white",
                "type": 29
              }
            },
            "program": "SDFGradient|vs|fs"
          }
        ]
      }
    ],
    "shaders": [
      {
        "hash": 3645289262,
        "glsl3": {
          "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform SDFARGS {\n  vec4 texSize;\n  vec2 maxDist;\n};\n#if SDF_HI_RES\n  #if SDF_DUAL_CHANNEL\n  float GetAlpha(sampler2D texture, vec2 st) {\n    vec2 uv = st.xy * texSize.xy;\n    vec2 uv00 = floor(uv - vec2(0.5));\n    vec2 uvlerp = uv - uv00 - vec2(0.5);\n    vec4 onestep = vec4(texSize.zw, 0., 0.5);\n    vec2 st00 = (uv00  + onestep.ww) * texSize.zw;\n    vec2 rawtex00 = texture2D(texture, st00).ar;\n    vec2 rawtex10 = texture2D(texture, st00 + onestep.xz).ar;\n    vec2 rawtex01 = texture2D(texture, st00 + onestep.zy).ar;\n    vec2 rawtex11 = texture2D(texture, st00 + onestep.xy).ar;\n        rawtex00.r = rawtex00.g * 0.00390625 + rawtex00.r;;\n    rawtex10.r = rawtex10.g * 0.00390625 + rawtex10.r;;\n    rawtex01.r = rawtex01.g * 0.00390625 + rawtex01.r;;\n    rawtex11.r = rawtex11.g * 0.00390625 + rawtex11.r;;\n    vec2 D00_10 = vec2(rawtex00.r, rawtex10.r);\n    vec2 D01_11 = vec2(rawtex01.r, rawtex11.r);\n    vec2 D0_1 = mix(D00_10, D01_11, uvlerp.y);\n    return mix(D0_1.x, D0_1.y, uvlerp.x);\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    return GetAlpha(texture, st) * 256. - 128.;\n  }\n  #else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return 16.0 * (alpha - 0.5);\n  }\n  #endif\n#else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return (alpha * 2. - 1.) * maxDist.x;\n  }\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  float D = GetD(texture, uv);\n  D *= maxDist.y;\n  gl_FragColor = vec4(vec3(1.), D);\n}"
        },
        "glsl1": {
          "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\nprecision highp float;\nuniform vec4 texSize;\nuniform vec2 maxDist;\n#if SDF_HI_RES\n  #if SDF_DUAL_CHANNEL\n  float GetAlpha(sampler2D texture, vec2 st) {\n    vec2 uv = st.xy * texSize.xy;\n    vec2 uv00 = floor(uv - vec2(0.5));\n    vec2 uvlerp = uv - uv00 - vec2(0.5);\n    vec4 onestep = vec4(texSize.zw, 0., 0.5);\n    vec2 st00 = (uv00  + onestep.ww) * texSize.zw;\n    vec2 rawtex00 = texture2D(texture, st00).ar;\n    vec2 rawtex10 = texture2D(texture, st00 + onestep.xz).ar;\n    vec2 rawtex01 = texture2D(texture, st00 + onestep.zy).ar;\n    vec2 rawtex11 = texture2D(texture, st00 + onestep.xy).ar;\n        rawtex00.r = rawtex00.g * 0.00390625 + rawtex00.r;;\n    rawtex10.r = rawtex10.g * 0.00390625 + rawtex10.r;;\n    rawtex01.r = rawtex01.g * 0.00390625 + rawtex01.r;;\n    rawtex11.r = rawtex11.g * 0.00390625 + rawtex11.r;;\n    vec2 D00_10 = vec2(rawtex00.r, rawtex10.r);\n    vec2 D01_11 = vec2(rawtex01.r, rawtex11.r);\n    vec2 D0_1 = mix(D00_10, D01_11, uvlerp.y);\n    return mix(D0_1.x, D0_1.y, uvlerp.x);\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    return GetAlpha(texture, st) * 256. - 128.;\n  }\n  #else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return 16.0 * (alpha - 0.5);\n  }\n  #endif\n#else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return (alpha * 2. - 1.) * maxDist.x;\n  }\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  float D = GetD(texture, uv);\n  D *= maxDist.y;\n  gl_FragColor = vec4(vec3(1.), D);\n}"
        },
        "builtins": {
          "globals": {
            "blocks": [
              {
                "name": "CCGlobal",
                "defines": []
              }
            ],
            "samplers": []
          },
          "locals": {
            "blocks": [
              {
                "name": "CCLocal",
                "defines": []
              }
            ],
            "samplers": []
          }
        },
        "defines": [
          {
            "name": "SDF_HI_RES",
            "type": "boolean",
            "defines": []
          },
          {
            "name": "SDF_DUAL_CHANNEL",
            "type": "boolean",
            "defines": [
              "SDF_HI_RES"
            ]
          }
        ],
        "blocks": [
          {
            "name": "SDFARGS",
            "members": [
              {
                "name": "texSize",
                "type": 16,
                "count": 1
              },
              {
                "name": "maxDist",
                "type": 14,
                "count": 1
              }
            ],
            "defines": [],
            "binding": 0
          }
        ],
        "samplers": [
          {
            "name": "texture",
            "type": 29,
            "count": 1,
            "defines": [],
            "binding": 30
          }
        ],
        "record": null,
        "name": "SDFGradient|vs|fs"
      }
    ]
  },
  {
    "__type__": "cc.SpriteFrame",
    "content": {
      "name": "singleColor_unpackable",
      "texture": "79C8YJ7jRBnZC3oX32MH83",
      "rect": [
        0,
        0,
        2,
        2
      ],
      "offset": [
        0,
        0
      ],
      "originalSize": [
        2,
        2
      ],
      "capInsets": [
        0,
        0,
        0,
        0
      ]
    }
  },
  {
    "__type__": "cc.SpriteFrame",
    "content": {
      "name": "Cocos",
      "texture": "36XEyqgUJGh4MIJUgoLx/o",
      "rect": [
        14,
        22,
        323,
        97
      ],
      "offset": [
        -4.5,
        -0.5
      ],
      "originalSize": [
        360,
        140
      ],
      "capInsets": [
        0,
        0,
        0,
        0
      ]
    }
  },
  {
    "__type__": "cc.SpriteFrame",
    "content": {
      "name": "HelloWorld",
      "texture": "31gyttHdBBt76XvsrfNnXM",
      "rect": [
        0,
        0,
        195,
        270
      ],
      "offset": [
        0,
        0
      ],
      "originalSize": [
        195,
        270
      ],
      "capInsets": [
        0,
        0,
        0,
        0
      ]
    }
  },
  {
    "__type__": "cc.Material",
    "_name": "SDFBloom",
    "_effectAsset": {
      "__uuid__": "05UWaCCVFA1LBu5Nt2ISrk"
    },
    "_techniqueData": {
      "0": {
        "props": {
          "texture": {
            "__uuid__": "79C8YJ7jRBnZC3oX32MH83"
          }
        }
      }
    }
  },
  {
    "__type__": "cc.SpriteFrame",
    "content": {
      "name": "default_radio_button_off",
      "texture": "56fc2Ai/RFNYpaMT8crweK",
      "rect": [
        3,
        3,
        26,
        26
      ],
      "offset": [
        0,
        0
      ],
      "originalSize": [
        32,
        32
      ],
      "capInsets": [
        0,
        0,
        0,
        0
      ]
    }
  },
  {
    "__type__": "cc.SpriteFrame",
    "content": {
      "name": "default_btn_pressed",
      "texture": "b4P/PCArtIdIH38t6mlw8Y",
      "rect": [
        0,
        0,
        40,
        40
      ],
      "offset": [
        0,
        0
      ],
      "originalSize": [
        40,
        40
      ],
      "capInsets": [
        12,
        12,
        12,
        12
      ]
    }
  },
  {
    "__type__": "cc.SpriteFrame",
    "content": {
      "name": "default_btn_normal",
      "texture": "e8Ueib+qJEhL6mXAHdnwbi",
      "rect": [
        0,
        0,
        40,
        40
      ],
      "offset": [
        0,
        0
      ],
      "originalSize": [
        40,
        40
      ],
      "capInsets": [
        12,
        12,
        12,
        12
      ]
    }
  },
  [
    {
      "__type__": "cc.SceneAsset",
      "_name": "SceneSDF",
      "scene": {
        "__id__": 1
      },
      "asyncLoadAssets": null
    },
    {
      "__type__": "cc.Scene",
      "_name": "New Node",
      "_children": [
        {
          "__id__": 2
        }
      ],
      "_anchorPoint": {
        "__type__": "cc.Vec2"
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "Canvas",
      "_parent": {
        "__id__": 1
      },
      "_children": [
        {
          "__id__": 3
        },
        {
          "__id__": 4
        },
        {
          "__id__": 5
        },
        {
          "__id__": 6
        },
        {
          "__id__": 7
        },
        {
          "__id__": 8
        },
        {
          "__id__": 9
        },
        {
          "__id__": 12
        },
        {
          "__id__": 15
        },
        {
          "__id__": 17
        },
        {
          "__id__": 18
        },
        {
          "__id__": 19
        },
        {
          "__id__": 20
        },
        {
          "__id__": 23
        }
      ],
      "_components": [
        {
          "__type__": "cc.Canvas",
          "node": {
            "__id__": 2
          },
          "_designResolution": {
            "__type__": "cc.Size",
            "width": 720,
            "height": 1280
          },
          "_fitWidth": true
        },
        {
          "__type__": "cc.Widget",
          "node": {
            "__id__": 2
          },
          "_alignFlags": 45
        },
        {
          "__type__": "c0baeCexs1O36cWxtIx48zu",
          "node": {
            "__id__": 2
          },
          "renderNodes": [
            {
              "__id__": 6
            },
            {
              "__id__": 7
            }
          ],
          "objNode": {
            "__id__": 8
          },
          "btnSwitchImage": {
            "__id__": 9
          },
          "btnSwitchEffect": {
            "__id__": 12
          },
          "images": [
            {
              "__uuid__": "9dTMeO9wVGqIb9FrgNT2Dy"
            },
            {
              "__uuid__": "de5NQV01FE96SBeJoGSRwP"
            },
            {
              "__uuid__": "d5DHx2GCFBIaw6YWk2DcVh"
            },
            {
              "__uuid__": "90rCpCv5JOlYvJGdjSinjf"
            },
            {
              "__uuid__": "025SB+ZudD45TtIcy7aJVu"
            }
          ],
          "materials": [
            {
              "__uuid__": "75z5umKvxCIIBPgyfUOc4P"
            },
            {
              "__uuid__": "9feRO9CWlDM67TR+aMsk29"
            },
            {
              "__uuid__": "17xLSjGXBF44L+IkD44cPg"
            },
            {
              "__uuid__": "e6Gm0aLURMF7SG5NKxVDY1"
            },
            {
              "__uuid__": "8aKTjbKT1MD6igHRuB7CIQ"
            },
            {
              "__uuid__": "abvJ6BcbJLWprDUPF3X10L"
            },
            {
              "__uuid__": "fa6gU2zh9NWKEsfuKMFvDa"
            },
            {
              "__uuid__": "05owQZ3ZJN05iAJoHfFGJB"
            },
            {
              "__uuid__": "9e4z9YW4BMWops7hKgY1Ih"
            },
            {
              "__uuid__": "8ct0J1aDdLUbC8Ep1n+slp"
            },
            {
              "__uuid__": "c7mk98OdNFGJGKG4ArxLVi"
            },
            {
              "__uuid__": "55ZLh5I1FMsaO+YrOwtIzk"
            },
            {
              "__uuid__": "a4cbh1twFEPpTq1Tj13j31"
            },
            {
              "__uuid__": "b2WS2YqN9NG7IkOw6CntWr"
            }
          ],
          "lblHint": {
            "__id__": 16
          }
        }
      ],
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 720,
        "height": 1280
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          360,
          640,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      },
      "_id": "a5esZu+45LA5mBpvttspPD"
    },
    {
      "__type__": "cc.Node",
      "_name": "dragArea",
      "_parent": {
        "__id__": 2
      },
      "_components": [
        {
          "__type__": "cc.Widget",
          "node": {
            "__id__": 3
          },
          "_alignFlags": 45
        }
      ],
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 720,
        "height": 1280
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "bg",
      "_parent": {
        "__id__": 2
      },
      "_components": [
        {
          "__type__": "cc.Widget",
          "node": {
            "__id__": 4
          },
          "_alignFlags": 45
        },
        {
          "__type__": "cc.Sprite",
          "node": {
            "__id__": 4
          },
          "_materials": [
            {
              "__uuid__": "ecpdLyjvZBwrvm+cedCcQy"
            }
          ],
          "_spriteFrame": {
            "__uuid__": "d1NC9cMO9JcbNgyq83PkQJ"
          },
          "_sizeMode": 0
        }
      ],
      "_color": {
        "__type__": "cc.Color"
      },
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 720,
        "height": 1280
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "Main Camera",
      "_parent": {
        "__id__": 2
      },
      "_components": [
        {
          "__type__": "cc.Camera",
          "node": {
            "__id__": 5
          },
          "_clearFlags": 7,
          "_depth": -1
        }
      ],
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 720,
        "height": 1280
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          0,
          0,
          749.1119742735394,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "SDF渲染图（EDT）",
      "_parent": {
        "__id__": 2
      },
      "_components": [
        {
          "__type__": "cc.Sprite",
          "node": {
            "__id__": 6
          },
          "_materials": [
            {
              "__uuid__": "75z5umKvxCIIBPgyfUOc4P"
            }
          ],
          "_spriteFrame": {
            "__uuid__": "78OoCFJpJLjYZhEc0FGMk7"
          },
          "_sizeMode": 2,
          "_isTrimmedMode": false
        },
        {
          "__type__": "89871MxfkBJjJh0o236XNDC",
          "node": {
            "__id__": 6
          }
        }
      ],
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 176,
        "height": 176
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          -177.578,
          60,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "SDF渲染图（EDTAA）",
      "_parent": {
        "__id__": 2
      },
      "_components": [
        {
          "__type__": "cc.Sprite",
          "node": {
            "__id__": 7
          },
          "_materials": [
            {
              "__uuid__": "75z5umKvxCIIBPgyfUOc4P"
            }
          ],
          "_spriteFrame": {
            "__uuid__": "78OoCFJpJLjYZhEc0FGMk7"
          },
          "_sizeMode": 2,
          "_isTrimmedMode": false
        },
        {
          "__type__": "89871MxfkBJjJh0o236XNDC",
          "node": {
            "__id__": 7
          }
        }
      ],
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 176,
        "height": 176
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          173.729,
          60,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "原图",
      "_parent": {
        "__id__": 2
      },
      "_components": [
        {
          "__type__": "cc.Sprite",
          "node": {
            "__id__": 8
          },
          "_materials": [
            {
              "__uuid__": "ecpdLyjvZBwrvm+cedCcQy"
            }
          ],
          "_spriteFrame": {
            "__uuid__": "9dTMeO9wVGqIb9FrgNT2Dy"
          },
          "_sizeMode": 2,
          "_isTrimmedMode": false
        },
        {
          "__type__": "89871MxfkBJjJh0o236XNDC",
          "node": {
            "__id__": 8
          }
        }
      ],
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 140,
        "height": 140
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          0,
          403.509,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "btnSwitchImage",
      "_parent": {
        "__id__": 2
      },
      "_children": [
        {
          "__id__": 10
        }
      ],
      "_components": [
        {
          "__type__": "cc.Button",
          "node": {
            "__id__": 9
          },
          "_N$transition": 2,
          "transition": 2,
          "_N$normalColor": {
            "__type__": "cc.Color",
            "r": 230,
            "g": 230,
            "b": 230
          },
          "_N$pressedColor": {
            "__type__": "cc.Color",
            "r": 200,
            "g": 200,
            "b": 200
          },
          "pressedColor": {
            "__type__": "cc.Color",
            "r": 200,
            "g": 200,
            "b": 200
          },
          "_N$disabledColor": {
            "__type__": "cc.Color",
            "r": 120,
            "g": 120,
            "b": 120,
            "a": 200
          },
          "_N$normalSprite": {
            "__uuid__": "f0BIwQ8D5Ml7nTNQbh1YlS"
          },
          "_N$pressedSprite": {
            "__uuid__": "e97GVMl6JHh5Ml5qEDdSGa"
          },
          "pressedSprite": {
            "__uuid__": "e97GVMl6JHh5Ml5qEDdSGa"
          },
          "_N$hoverSprite": {
            "__uuid__": "f0BIwQ8D5Ml7nTNQbh1YlS"
          },
          "hoverSprite": {
            "__uuid__": "f0BIwQ8D5Ml7nTNQbh1YlS"
          },
          "_N$disabledSprite": {
            "__uuid__": "29FYIk+N1GYaeWH/q1NxQO"
          },
          "_N$target": {
            "__id__": 10
          }
        }
      ],
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 100,
        "height": 40
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          -123.689,
          -452.015,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "Background",
      "_objFlags": 512,
      "_parent": {
        "__id__": 9
      },
      "_children": [
        {
          "__id__": 11
        }
      ],
      "_components": [
        {
          "__type__": "cc.Sprite",
          "node": {
            "__id__": 10
          },
          "_materials": [
            {
              "__uuid__": "ecpdLyjvZBwrvm+cedCcQy"
            }
          ],
          "_spriteFrame": {
            "__uuid__": "f0BIwQ8D5Ml7nTNQbh1YlS"
          },
          "_type": 1,
          "_sizeMode": 0
        },
        {
          "__type__": "cc.Widget",
          "node": {
            "__id__": 10
          },
          "alignMode": 0,
          "_alignFlags": 45,
          "_originalWidth": 100,
          "_originalHeight": 40
        }
      ],
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 100,
        "height": 40
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "Label",
      "_objFlags": 512,
      "_parent": {
        "__id__": 10
      },
      "_components": [
        {
          "__type__": "cc.Label",
          "node": {
            "__id__": 11
          },
          "_materials": [
            {
              "__uuid__": "ecpdLyjvZBwrvm+cedCcQy"
            }
          ],
          "_useOriginalSize": false,
          "_string": "切图片",
          "_N$string": "切图片",
          "_fontSize": 20,
          "_enableWrapText": false,
          "_N$horizontalAlign": 1,
          "_N$verticalAlign": 1,
          "_N$overflow": 1,
          "_N$cacheMode": 1
        }
      ],
      "_color": {
        "__type__": "cc.Color"
      },
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 100,
        "height": 40
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "btnSwitchEffect",
      "_parent": {
        "__id__": 2
      },
      "_children": [
        {
          "__id__": 13
        }
      ],
      "_components": [
        {
          "__type__": "cc.Button",
          "node": {
            "__id__": 12
          },
          "_N$transition": 2,
          "transition": 2,
          "_N$normalColor": {
            "__type__": "cc.Color",
            "r": 230,
            "g": 230,
            "b": 230
          },
          "_N$pressedColor": {
            "__type__": "cc.Color",
            "r": 200,
            "g": 200,
            "b": 200
          },
          "pressedColor": {
            "__type__": "cc.Color",
            "r": 200,
            "g": 200,
            "b": 200
          },
          "_N$disabledColor": {
            "__type__": "cc.Color",
            "r": 120,
            "g": 120,
            "b": 120,
            "a": 200
          },
          "_N$normalSprite": {
            "__uuid__": "f0BIwQ8D5Ml7nTNQbh1YlS"
          },
          "_N$pressedSprite": {
            "__uuid__": "e97GVMl6JHh5Ml5qEDdSGa"
          },
          "pressedSprite": {
            "__uuid__": "e97GVMl6JHh5Ml5qEDdSGa"
          },
          "_N$hoverSprite": {
            "__uuid__": "f0BIwQ8D5Ml7nTNQbh1YlS"
          },
          "hoverSprite": {
            "__uuid__": "f0BIwQ8D5Ml7nTNQbh1YlS"
          },
          "_N$disabledSprite": {
            "__uuid__": "29FYIk+N1GYaeWH/q1NxQO"
          },
          "_N$target": {
            "__id__": 13
          }
        }
      ],
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 100,
        "height": 40
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          97.8,
          -452.015,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "Background",
      "_objFlags": 512,
      "_parent": {
        "__id__": 12
      },
      "_children": [
        {
          "__id__": 14
        }
      ],
      "_components": [
        {
          "__type__": "cc.Sprite",
          "node": {
            "__id__": 13
          },
          "_materials": [
            {
              "__uuid__": "ecpdLyjvZBwrvm+cedCcQy"
            }
          ],
          "_spriteFrame": {
            "__uuid__": "f0BIwQ8D5Ml7nTNQbh1YlS"
          },
          "_type": 1,
          "_sizeMode": 0
        },
        {
          "__type__": "cc.Widget",
          "node": {
            "__id__": 13
          },
          "alignMode": 0,
          "_alignFlags": 45,
          "_originalWidth": 100,
          "_originalHeight": 40
        }
      ],
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 100,
        "height": 40
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "Label",
      "_objFlags": 512,
      "_parent": {
        "__id__": 13
      },
      "_components": [
        {
          "__type__": "cc.Label",
          "node": {
            "__id__": 14
          },
          "_materials": [
            {
              "__uuid__": "ecpdLyjvZBwrvm+cedCcQy"
            }
          ],
          "_useOriginalSize": false,
          "_string": "切效果",
          "_N$string": "切效果",
          "_fontSize": 20,
          "_enableWrapText": false,
          "_N$horizontalAlign": 1,
          "_N$verticalAlign": 1,
          "_N$overflow": 1,
          "_N$cacheMode": 1
        }
      ],
      "_color": {
        "__type__": "cc.Color"
      },
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 100,
        "height": 40
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "lblHint",
      "_parent": {
        "__id__": 2
      },
      "_components": [
        {
          "__id__": 16
        }
      ],
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 112,
        "height": 35.28
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          103.386,
          -373.357,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "__type__": "cc.Label",
      "node": {
        "__id__": 15
      },
      "_materials": [
        {
          "__uuid__": "ecpdLyjvZBwrvm+cedCcQy"
        }
      ],
      "_useOriginalSize": false,
      "_string": "当前效果",
      "_N$string": "当前效果",
      "_fontSize": 28,
      "_lineHeight": 28,
      "_N$horizontalAlign": 1,
      "_N$verticalAlign": 1
    },
    {
      "__type__": "cc.Node",
      "_name": "lblOrigin",
      "_parent": {
        "__id__": 2
      },
      "_components": [
        {
          "__type__": "cc.Label",
          "node": {
            "__id__": 17
          },
          "_materials": [
            {
              "__uuid__": "ecpdLyjvZBwrvm+cedCcQy"
            }
          ],
          "_useOriginalSize": false,
          "_string": "原图",
          "_N$string": "原图",
          "_fontSize": 32,
          "_lineHeight": 32,
          "_N$horizontalAlign": 1,
          "_N$verticalAlign": 1
        }
      ],
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 64,
        "height": 40.32
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          -6.978,
          297.434,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "lblEDT",
      "_parent": {
        "__id__": 2
      },
      "_components": [
        {
          "__type__": "cc.Label",
          "node": {
            "__id__": 18
          },
          "_materials": [
            {
              "__uuid__": "ecpdLyjvZBwrvm+cedCcQy"
            }
          ],
          "_useOriginalSize": false,
          "_string": "EDT\n低分辨率",
          "_N$string": "EDT\n低分辨率",
          "_fontSize": 32,
          "_lineHeight": 32,
          "_N$horizontalAlign": 1,
          "_N$verticalAlign": 1
        }
      ],
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 128,
        "height": 72.32
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          -179.833,
          -118,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "lblEDTAA3",
      "_parent": {
        "__id__": 2
      },
      "_components": [
        {
          "__type__": "cc.Label",
          "node": {
            "__id__": 19
          },
          "_materials": [
            {
              "__uuid__": "ecpdLyjvZBwrvm+cedCcQy"
            }
          ],
          "_useOriginalSize": false,
          "_string": "EDTAA3\n高分辨率",
          "_N$string": "EDTAA3\n高分辨率",
          "_fontSize": 32,
          "_lineHeight": 32,
          "_N$horizontalAlign": 1,
          "_N$verticalAlign": 1
        }
      ],
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 128,
        "height": 72.32
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          186.609,
          -118,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "btnQuit",
      "_parent": {
        "__id__": 2
      },
      "_children": [
        {
          "__id__": 21
        }
      ],
      "_components": [
        {
          "__type__": "cc.Button",
          "node": {
            "__id__": 20
          },
          "_N$transition": 3,
          "transition": 3,
          "_N$normalColor": {
            "__type__": "cc.Color",
            "r": 230,
            "g": 230,
            "b": 230
          },
          "_N$pressedColor": {
            "__type__": "cc.Color",
            "r": 200,
            "g": 200,
            "b": 200
          },
          "pressedColor": {
            "__type__": "cc.Color",
            "r": 200,
            "g": 200,
            "b": 200
          },
          "_N$disabledColor": {
            "__type__": "cc.Color",
            "r": 120,
            "g": 120,
            "b": 120,
            "a": 200
          },
          "_N$normalSprite": {
            "__uuid__": "6bbrf4G5VID5u3nmCX2Knp"
          },
          "_N$pressedSprite": {
            "__uuid__": "e97GVMl6JHh5Ml5qEDdSGa"
          },
          "pressedSprite": {
            "__uuid__": "e97GVMl6JHh5Ml5qEDdSGa"
          },
          "_N$hoverSprite": {
            "__uuid__": "f0BIwQ8D5Ml7nTNQbh1YlS"
          },
          "hoverSprite": {
            "__uuid__": "f0BIwQ8D5Ml7nTNQbh1YlS"
          },
          "_N$disabledSprite": {
            "__uuid__": "29FYIk+N1GYaeWH/q1NxQO"
          },
          "_N$target": {
            "__id__": 21
          }
        },
        {
          "__type__": "58a22OqN5RI3plga6Z+CurZ",
          "node": {
            "__id__": 20
          },
          "sceneName": "SceneShaders"
        }
      ],
      "_prefab": {
        "__type__": "cc.PrefabInfo",
        "root": {
          "__id__": 20
        },
        "asset": {
          "__uuid__": "6dpCGuOsFJSI1lksMDQfLz"
        },
        "fileId": "ce0M6as4lBA7QtDRVjuTPC"
      },
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 150,
        "height": 40
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          188.842,
          546.373,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "Background",
      "_objFlags": 512,
      "_parent": {
        "__id__": 20
      },
      "_children": [
        {
          "__id__": 22
        }
      ],
      "_components": [
        {
          "__type__": "cc.Sprite",
          "node": {
            "__id__": 21
          },
          "_materials": [
            {
              "__uuid__": "ecpdLyjvZBwrvm+cedCcQy"
            }
          ],
          "_spriteFrame": {
            "__uuid__": "6bbrf4G5VID5u3nmCX2Knp"
          },
          "_type": 1,
          "_sizeMode": 0
        },
        {
          "__type__": "cc.Widget",
          "node": {
            "__id__": 21
          },
          "alignMode": 0,
          "_alignFlags": 45,
          "_originalWidth": 100,
          "_originalHeight": 40
        }
      ],
      "_prefab": {
        "__type__": "cc.PrefabInfo",
        "root": {
          "__id__": 20
        },
        "asset": {
          "__uuid__": "6dpCGuOsFJSI1lksMDQfLz"
        },
        "fileId": "94U2qJRW5F5J6PizBxfR+W"
      },
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 150,
        "height": 40
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          0
        ]
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "Label",
      "_objFlags": 512,
      "_parent": {
        "__id__": 21
      },
      "_components": [
        {
          "__type__": "cc.Label",
          "node": {
            "__id__": 22
          },
          "_materials": [
            {
              "__uuid__": "ecpdLyjvZBwrvm+cedCcQy"
            }
          ],
          "_useOriginalSize": false,
          "_fontSize": 20,
          "_enableWrapText": false,
          "_N$horizontalAlign": 1,
          "_N$verticalAlign": 1,
          "_N$overflow": 1,
          "_N$cacheMode": 1
        }
      ],
      "_prefab": {
        "__type__": "cc.PrefabInfo",
        "root": {
          "__id__": 20
        },
        "asset": {
          "__uuid__": "6dpCGuOsFJSI1lksMDQfLz"
        },
        "fileId": "f2UpzTBw1F0ateQZp9wAHp"
      },
      "_color": {
        "__type__": "cc.Color"
      },
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 100,
        "height": 40
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "sliderEdge",
      "_parent": {
        "__id__": 2
      },
      "_children": [
        {
          "__id__": 24
        },
        {
          "__id__": 25
        }
      ],
      "_active": false,
      "_components": [
        {
          "__type__": "cc.Slider",
          "node": {
            "__id__": 23
          },
          "slideEvents": [
            {
              "__type__": "cc.ClickEvent",
              "target": {
                "__id__": 2
              },
              "_componentId": "c0baeCexs1O36cWxtIx48zu",
              "handler": "OnEdgeSliderChanged"
            }
          ],
          "_N$handle": {
            "__id__": 26
          }
        }
      ],
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 300,
        "height": 20
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          180.873,
          -187.594,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "Background",
      "_objFlags": 512,
      "_parent": {
        "__id__": 23
      },
      "_components": [
        {
          "__type__": "cc.Sprite",
          "node": {
            "__id__": 24
          },
          "_materials": [
            {
              "__uuid__": "ecpdLyjvZBwrvm+cedCcQy"
            }
          ],
          "_spriteFrame": {
            "__uuid__": "312JYturtOx74Zjp9UpOqZ"
          },
          "_type": 1,
          "_sizeMode": 0
        }
      ],
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 300,
        "height": 20
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "Handle",
      "_objFlags": 512,
      "_parent": {
        "__id__": 23
      },
      "_components": [
        {
          "__type__": "cc.Sprite",
          "node": {
            "__id__": 25
          },
          "_materials": [
            {
              "__uuid__": "ecpdLyjvZBwrvm+cedCcQy"
            }
          ],
          "_spriteFrame": {
            "__uuid__": "e7q6FL+VZEgLJUjVeDLic/"
          },
          "_type": 1,
          "_sizeMode": 2
        },
        {
          "__id__": 26
        }
      ],
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 32,
        "height": 32
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "__type__": "cc.Button",
      "node": {
        "__id__": 25
      },
      "_normalMaterial": {
        "__uuid__": "ecpdLyjvZBwrvm+cedCcQy"
      },
      "zoomScale": 1.1,
      "_N$enableAutoGrayEffect": true,
      "_N$transition": 3,
      "transition": 3,
      "_N$pressedColor": {
        "__type__": "cc.Color",
        "r": 255,
        "g": 255,
        "b": 255
      },
      "pressedColor": {
        "__type__": "cc.Color",
        "r": 255,
        "g": 255,
        "b": 255
      },
      "_N$disabledColor": {
        "__type__": "cc.Color",
        "r": 255,
        "g": 255,
        "b": 255
      },
      "_N$normalSprite": {
        "__uuid__": "e7q6FL+VZEgLJUjVeDLic/"
      },
      "_N$pressedSprite": {
        "__uuid__": "e7q6FL+VZEgLJUjVeDLic/"
      },
      "pressedSprite": {
        "__uuid__": "e7q6FL+VZEgLJUjVeDLic/"
      },
      "_N$hoverSprite": {
        "__uuid__": "e7q6FL+VZEgLJUjVeDLic/"
      },
      "hoverSprite": {
        "__uuid__": "e7q6FL+VZEgLJUjVeDLic/"
      },
      "_N$disabledSprite": {
        "__uuid__": "29FYIk+N1GYaeWH/q1NxQO"
      },
      "_N$target": {
        "__id__": 25
      }
    }
  ],
  {
    "__type__": "cc.Material",
    "_name": "SDFOutline2",
    "_effectAsset": {
      "__uuid__": "c0jjgp51RNyLCI7SqsW45Y"
    },
    "_techniqueData": {
      "0": {
        "props": {
          "texture": {
            "__uuid__": "79C8YJ7jRBnZC3oX32MH83"
          }
        }
      }
    }
  },
  {
    "__type__": "cc.EffectAsset",
    "_name": "SDFGlow",
    "techniques": [
      {
        "passes": [
          {
            "blendState": {
              "targets": [
                {
                  "blend": true
                }
              ]
            },
            "rasterizerState": {
              "cullMode": 0
            },
            "properties": {
              "texture": {
                "value": "white",
                "type": 29
              }
            },
            "program": "SDFGlow|vs|fs"
          }
        ]
      }
    ],
    "shaders": [
      {
        "hash": 3362502160,
        "glsl3": {
          "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform SDFARGS {\n  vec4 texSize;\n  vec2 maxDist;\n};\n#if SDF_HI_RES\n  #if SDF_DUAL_CHANNEL\n  float GetAlpha(sampler2D texture, vec2 st) {\n    vec2 uv = st.xy * texSize.xy;\n    vec2 uv00 = floor(uv - vec2(0.5));\n    vec2 uvlerp = uv - uv00 - vec2(0.5);\n    vec4 onestep = vec4(texSize.zw, 0., 0.5);\n    vec2 st00 = (uv00  + onestep.ww) * texSize.zw;\n    vec2 rawtex00 = texture2D(texture, st00).ar;\n    vec2 rawtex10 = texture2D(texture, st00 + onestep.xz).ar;\n    vec2 rawtex01 = texture2D(texture, st00 + onestep.zy).ar;\n    vec2 rawtex11 = texture2D(texture, st00 + onestep.xy).ar;\n        rawtex00.r = rawtex00.g * 0.00390625 + rawtex00.r;;\n    rawtex10.r = rawtex10.g * 0.00390625 + rawtex10.r;;\n    rawtex01.r = rawtex01.g * 0.00390625 + rawtex01.r;;\n    rawtex11.r = rawtex11.g * 0.00390625 + rawtex11.r;;\n    vec2 D00_10 = vec2(rawtex00.r, rawtex10.r);\n    vec2 D01_11 = vec2(rawtex01.r, rawtex11.r);\n    vec2 D0_1 = mix(D00_10, D01_11, uvlerp.y);\n    return mix(D0_1.x, D0_1.y, uvlerp.x);\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    return GetAlpha(texture, st) * 256. - 128.;\n  }\n  #else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return 16.0 * (alpha - 0.5);\n  }\n  #endif\n#else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return (alpha * 2. - 1.) * maxDist.x;\n  }\n#endif\nin vec4 v_color;\nin vec2 v_uv0;\nin vec2 v_uv1;\nuniform sampler2D texture;\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  float D = GetD(texture, uv);\n  float inside = smoothstep(-2.0, 2.0, D);\n  float glow = smoothstep(-14.0, 2., D);\n  vec3 insideColor = vec3(1.0, 1.0, 0.0);\n  vec3 glowColor = vec3(1.0, 0.3, 0.0);\n  vec3 fragColor = mix(glowColor, insideColor, inside);\n  gl_FragColor = vec4(fragColor, glow);\n}"
        },
        "glsl1": {
          "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
          "frag": "\nprecision highp float;\nuniform vec4 texSize;\nuniform vec2 maxDist;\n#if SDF_HI_RES\n  #if SDF_DUAL_CHANNEL\n  float GetAlpha(sampler2D texture, vec2 st) {\n    vec2 uv = st.xy * texSize.xy;\n    vec2 uv00 = floor(uv - vec2(0.5));\n    vec2 uvlerp = uv - uv00 - vec2(0.5);\n    vec4 onestep = vec4(texSize.zw, 0., 0.5);\n    vec2 st00 = (uv00  + onestep.ww) * texSize.zw;\n    vec2 rawtex00 = texture2D(texture, st00).ar;\n    vec2 rawtex10 = texture2D(texture, st00 + onestep.xz).ar;\n    vec2 rawtex01 = texture2D(texture, st00 + onestep.zy).ar;\n    vec2 rawtex11 = texture2D(texture, st00 + onestep.xy).ar;\n        rawtex00.r = rawtex00.g * 0.00390625 + rawtex00.r;;\n    rawtex10.r = rawtex10.g * 0.00390625 + rawtex10.r;;\n    rawtex01.r = rawtex01.g * 0.00390625 + rawtex01.r;;\n    rawtex11.r = rawtex11.g * 0.00390625 + rawtex11.r;;\n    vec2 D00_10 = vec2(rawtex00.r, rawtex10.r);\n    vec2 D01_11 = vec2(rawtex01.r, rawtex11.r);\n    vec2 D0_1 = mix(D00_10, D01_11, uvlerp.y);\n    return mix(D0_1.x, D0_1.y, uvlerp.x);\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    return GetAlpha(texture, st) * 256. - 128.;\n  }\n  #else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return 16.0 * (alpha - 0.5);\n  }\n  #endif\n#else\n  float GetAlpha(sampler2D texture, vec2 st) {\n    return texture2D(texture, st).a;\n  }\n  float GetD(sampler2D texture, vec2 st) {\n    float alpha = GetAlpha(texture, st);\n    return (alpha * 2. - 1.) * maxDist.x;\n  }\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nvarying vec2 v_uv1;\nuniform sampler2D texture;\nvoid main()\n{\n  vec2 uv = v_uv0.xy;\n  float D = GetD(texture, uv);\n  float inside = smoothstep(-2.0, 2.0, D);\n  float glow = smoothstep(-14.0, 2., D);\n  vec3 insideColor = vec3(1.0, 1.0, 0.0);\n  vec3 glowColor = vec3(1.0, 0.3, 0.0);\n  vec3 fragColor = mix(glowColor, insideColor, inside);\n  gl_FragColor = vec4(fragColor, glow);\n}"
        },
        "builtins": {
          "globals": {
            "blocks": [
              {
                "name": "CCGlobal",
                "defines": []
              }
            ],
            "samplers": []
          },
          "locals": {
            "blocks": [
              {
                "name": "CCLocal",
                "defines": []
              }
            ],
            "samplers": []
          }
        },
        "defines": [
          {
            "name": "SDF_HI_RES",
            "type": "boolean",
            "defines": []
          },
          {
            "name": "SDF_DUAL_CHANNEL",
            "type": "boolean",
            "defines": [
              "SDF_HI_RES"
            ]
          }
        ],
        "blocks": [
          {
            "name": "SDFARGS",
            "members": [
              {
                "name": "texSize",
                "type": 16,
                "count": 1
              },
              {
                "name": "maxDist",
                "type": 14,
                "count": 1
              }
            ],
            "defines": [],
            "binding": 0
          }
        ],
        "samplers": [
          {
            "name": "texture",
            "type": 29,
            "count": 1,
            "defines": [],
            "binding": 30
          }
        ],
        "record": null,
        "name": "SDFGlow|vs|fs"
      }
    ]
  }
]